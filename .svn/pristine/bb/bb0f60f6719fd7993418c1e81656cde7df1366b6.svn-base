import {AttendanceModel} from '../schemas/attendSchema';
import {UserModel} from '../schemas/userSchema';
import {LectureModel} from '../schemas/classSchema';
import {distance} from '../helpers/utils';
import ServerError from '../helpers/ServerError';
import _ from 'lodash';

export default {
    list: async function(req, res) {
        const {did, sectionId, courseId, start, end} = req.query
        let timestamp:any = {};
        let query = {};

        if (did) query = Object.assign(query, {did})
        if (sectionId) query = Object.assign(query, {sectionId: sectionId.toLowerCase()})
        if (courseId) query = Object.assign(query, {courseId: courseId.toLowerCase()})
        if (start) timestamp["$gte"] = Date.parse(start);
        if (end) timestamp["$lte"] = Date.parse(end);
        if (!_.isEmpty(timestamp)) query = Object.assign(query, {timestamp})


        try {
            let results = await AttendanceModel.find(query).exec()
            return res.json(results);
        } catch (e) {
            console.error(e)
            return res.status(500).end();
        }
    },
    create: async function(req, res) {
        const did = req.session.cas.did;
        const {location} = req.body
        try {

            let now = new Date();
            let early = 10*60*1000; // 10 mintues
            let user:Object = await UserModel.find({did}).exec();
            let lecture = LectureModel.findOne({
                lectureName: {$in: user.lectures}, 
                'schedule.time.start': {'gte': now.getHours().toString + (now.getMinutes() - early).toString()},
                'schedule.time.end': {'lte': now.getHours().toString()+now.getMinutes().toString()},
                'schedule.time.day': now.getDay()
            }).exec();
            if (!lecture) throw new ServerError("Student cannot check in to a class right now", 400);
            

            let lecLoc = lecture.schedule.location;
            let radius = lecLoc.radius;
            // Apply the haversine distance formula
            let clat = parseFloat(lecLoc.lat);
            let clng = parseFloat(lecLoc.lng);
            let slat = parseFloat(location.lat);
            let slng = parseFloat(location.lng);
            let dist = distance(clat, clng, slat, slng);
            if (dist > radius) return res.sendStatus(400).json({message: `Provided location is not in the boundary of ${lecture.lectureName}`});
            let sectionId = user.courses.find(c => c.courseId === lecture.courseId).sectionId
            const log = {
                "did": did,
                "timestamp": now.getTime(),
                "lectureId": lecture.lectureId,
                "sectionId": sectionId,
                "courseId": lecture.courseId
            };
                let newLog = new AttendanceModel(log);
                newLog = await newLog.save();
                return res.json(newLog);
        } catch(e) {
            if (e instanceof ServerError) return res.status(400).json({message: e.message})
            else {
                console.error(e)
                return res.status(500)
            }
        }
    },
    delete: async function(req, res) {
        let {courseId} = req.body;
        let filter = {};
        if (courseId) filter = Object.assign(filter, {courseId})
        try {
            await ctx.db.collection("attendance").deleteMany(filter);
            res.status(204).end()
        } catch(e) {
            console.error(e)
            res.status(500).end();
        }
    },
    attendance2csv: async function(req, res) {
        await ctx.db.collection('attendance').find({}, (err, attendance) => {
            if (err) {
                return res.status(500).json({err});
            } else {
                let csv;
                const fields = ['did','course_id', 'section_id', 'timestamp', 'meeting_type']
                try {
                    csv = json2csv(attendance, {fields});
                } catch (err) {
                    return res.status(500).json({err})
                }
                const dateTime = moment().format('YYYYMMDDhhmmss'); //sets name of the file as the date it was created
                const filePath = path.join(__dirname, "../public", "exports", "csv-" + dateTime + ".csv");
                fs.writeFile(filePath, csv, (err) => {
                    if (err) {
                        return res.json(err).status(500);
                    } else {
                        setTimeout(() => {
                            fs.unlinkSync(filePath); // delete file after 30 sec
                        }, 30000)
                        return res.json("/exports/csv-" + dateTime + ".csv")
                    }
                })
            }
        })
    }
}