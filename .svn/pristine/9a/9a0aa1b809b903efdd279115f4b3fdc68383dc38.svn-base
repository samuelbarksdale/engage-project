{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import TouchableNativeFeedback from\"react-native-web/dist/exports/TouchableNativeFeedback\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import TouchableWithoutFeedback from\"react-native-web/dist/exports/TouchableWithoutFeedback\";import View from\"react-native-web/dist/exports/View\";var TouchableComponent;if(Platform.OS==='android'){TouchableComponent=Platform.Version<=20?TouchableOpacity:TouchableNativeFeedback;}else{TouchableComponent=TouchableOpacity;}if(TouchableComponent!==TouchableNativeFeedback){TouchableComponent.SelectableBackground=function(){return{};};TouchableComponent.SelectableBackgroundBorderless=function(){return{};};TouchableComponent.Ripple=function(){return{};};TouchableComponent.canUseNativeForeground=function(){return false;};}var PlatformTouchable=function(_React$Component){_inherits(PlatformTouchable,_React$Component);function PlatformTouchable(){_classCallCheck(this,PlatformTouchable);return _possibleConstructorReturn(this,_getPrototypeOf(PlatformTouchable).apply(this,arguments));}_createClass(PlatformTouchable,[{key:\"render\",value:function render(){var _this$props=this.props,children=_this$props.children,style=_this$props.style,foreground=_this$props.foreground,background=_this$props.background,useForeground=_this$props.useForeground,props=_objectWithoutProperties(_this$props,[\"children\",\"style\",\"foreground\",\"background\",\"useForeground\"]);children=React.Children.only(children);if(TouchableComponent===TouchableNativeFeedback){useForeground=foreground&&TouchableNativeFeedback.canUseNativeForeground();if(foreground&&background){console.warn('Specified foreground and background for Touchable, only one can be used at a time. Defaulted to foreground.');}return React.createElement(TouchableComponent,_extends({},props,{useForeground:useForeground,background:useForeground&&foreground||background}),React.createElement(View,{style:style},children));}else if(TouchableComponent===TouchableWithoutFeedback){return React.createElement(TouchableWithoutFeedback,props,React.createElement(View,{style:style},children));}else{var TouchableFallback=this.props.fallback||TouchableComponent;return React.createElement(TouchableFallback,_extends({},props,{style:style}),children);}}}]);return PlatformTouchable;}(React.Component);PlatformTouchable.SelectableBackground=TouchableComponent.SelectableBackground;PlatformTouchable.SelectableBackgroundBorderless=TouchableComponent.SelectableBackgroundBorderless;PlatformTouchable.Ripple=TouchableComponent.Ripple;PlatformTouchable.canUseNativeForeground=TouchableComponent.canUseNativeForeground;export{PlatformTouchable as default};","map":{"version":3,"sources":["C:/Users/Prashant Krishnan/Expo/project/node_modules/react-native-platform-touchable/PlatformTouchable.js"],"names":["React","TouchableComponent","Platform","OS","Version","TouchableOpacity","TouchableNativeFeedback","SelectableBackground","SelectableBackgroundBorderless","Ripple","canUseNativeForeground","PlatformTouchable","props","children","style","foreground","background","useForeground","Children","only","console","warn","TouchableWithoutFeedback","TouchableFallback","fallback","Component"],"mappings":"6dAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,uXASA,GAAIC,CAAAA,kBAAJ,CAEA,GAAIC,QAAQ,CAACC,EAAT,GAAgB,SAApB,CAA+B,CAC7BF,kBAAkB,CAChBC,QAAQ,CAACE,OAAT,EAAoB,EAApB,CAAyBC,gBAAzB,CAA4CC,uBAD9C,CAED,CAHD,IAGO,CACLL,kBAAkB,CAAGI,gBAArB,CACD,CAED,GAAIJ,kBAAkB,GAAKK,uBAA3B,CAAoD,CAClDL,kBAAkB,CAACM,oBAAnB,CAA0C,iBAAO,EAAP,EAA1C,CACAN,kBAAkB,CAACO,8BAAnB,CAAoD,iBAAO,EAAP,EAApD,CACAP,kBAAkB,CAACQ,MAAnB,CAA4B,iBAAO,EAAP,EAA5B,CACAR,kBAAkB,CAACS,sBAAnB,CAA4C,iBAAM,MAAN,EAA5C,CACD,C,GAEoBC,CAAAA,iB,sTAMV,iBAQH,KAAKC,KARF,CAELC,QAFK,aAELA,QAFK,CAGLC,KAHK,aAGLA,KAHK,CAILC,UAJK,aAILA,UAJK,CAKLC,UALK,aAKLA,UALK,CAMLC,aANK,aAMLA,aANK,CAOFL,KAPE,sGAcPC,QAAQ,CAAGb,KAAK,CAACkB,QAAN,CAAeC,IAAf,CAAoBN,QAApB,CAAX,CAEA,GAAIZ,kBAAkB,GAAKK,uBAA3B,CAAoD,CAClDW,aAAa,CACXF,UAAU,EAAIT,uBAAuB,CAACI,sBAAxB,EADhB,CAGA,GAAIK,UAAU,EAAIC,UAAlB,CAA8B,CAC5BI,OAAO,CAACC,IAAR,CACE,6GADF,EAGD,CAED,MACE,qBAAC,kBAAD,aACMT,KADN,EAEE,aAAa,CAAEK,aAFjB,CAGE,UAAU,CAAGA,aAAa,EAAIF,UAAlB,EAAiCC,UAH/C,GAIE,oBAAC,IAAD,EAAM,KAAK,CAAEF,KAAb,EACGD,QADH,CAJF,CADF,CAUD,CApBD,IAoBO,IAAIZ,kBAAkB,GAAKqB,wBAA3B,CAAqD,CAC1D,MACE,qBAAC,wBAAD,CAA8BV,KAA9B,CACE,oBAAC,IAAD,EAAM,KAAK,CAAEE,KAAb,EACGD,QADH,CADF,CADF,CAOD,CARM,IAQA,CACL,GAAIU,CAAAA,iBAAiB,CAAG,KAAKX,KAAL,CAAWY,QAAX,EAAuBvB,kBAA/C,CACA,MACE,qBAAC,iBAAD,aAAuBW,KAAvB,EAA8B,KAAK,CAAEE,KAArC,GACGD,QADH,CADF,CAKD,CACF,C,+BA1D4Cb,KAAK,CAACyB,S,EAAhCd,iB,CACZJ,oB,CAAuBN,kBAAkB,CAACM,oB,CAD9BI,iB,CAEZH,8B,CAAiCP,kBAAkB,CAACO,8B,CAFxCG,iB,CAGZF,M,CAASR,kBAAkB,CAACQ,M,CAHhBE,iB,CAIZD,sB,CAAyBT,kBAAkB,CAACS,sB,QAJhCC,iB","sourcesContent":["import React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\n\nlet TouchableComponent;\n\nif (Platform.OS === 'android') {\n  TouchableComponent =\n    Platform.Version <= 20 ? TouchableOpacity : TouchableNativeFeedback;\n} else {\n  TouchableComponent = TouchableOpacity;\n}\n\nif (TouchableComponent !== TouchableNativeFeedback) {\n  TouchableComponent.SelectableBackground = () => ({});\n  TouchableComponent.SelectableBackgroundBorderless = () => ({});\n  TouchableComponent.Ripple = () => ({});\n  TouchableComponent.canUseNativeForeground = () => false;\n}\n\nexport default class PlatformTouchable extends React.Component {\n  static SelectableBackground = TouchableComponent.SelectableBackground;\n  static SelectableBackgroundBorderless = TouchableComponent.SelectableBackgroundBorderless;\n  static Ripple = TouchableComponent.Ripple;\n  static canUseNativeForeground = TouchableComponent.canUseNativeForeground;\n\n  render() {\n    let {\n      children,\n      style,\n      foreground,\n      background,\n      useForeground,\n      ...props\n    } = this.props;\n\n    // Even though it works for TouchableWithoutFeedback and\n    // TouchableNativeFeedback with this component, we want\n    // the API to be the same for all components so we require\n    // exactly one direct child for every touchable type.\n    children = React.Children.only(children);\n\n    if (TouchableComponent === TouchableNativeFeedback) {\n      useForeground =\n        foreground && TouchableNativeFeedback.canUseNativeForeground();\n\n      if (foreground && background) {\n        console.warn(\n          'Specified foreground and background for Touchable, only one can be used at a time. Defaulted to foreground.'\n        );\n      }\n\n      return (\n        <TouchableComponent\n          {...props}\n          useForeground={useForeground}\n          background={(useForeground && foreground) || background}>\n          <View style={style}>\n            {children}\n          </View>\n        </TouchableComponent>\n      );\n    } else if (TouchableComponent === TouchableWithoutFeedback) {\n      return (\n        <TouchableWithoutFeedback {...props}>\n          <View style={style}>\n            {children}\n          </View>\n        </TouchableWithoutFeedback>\n      );\n    } else {\n      let TouchableFallback = this.props.fallback || TouchableComponent;\n      return (\n        <TouchableFallback {...props} style={style}>\n          {children}\n        </TouchableFallback>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}