{"version":3,"sources":["config.js","api.js","pages/HomePage.jsx","components/AttendanceGraphs.jsx","components/StudentAttendance.jsx","pages/AttendancePage.jsx","components/AbsenceCard.jsx","components/AbsenceList.jsx","pages/AbsencePage.jsx","components/PollCard.jsx","components/PollForm.jsx","pages/PollsPage.jsx","components/LectureDisplay.jsx","components/GeolocationButton.jsx","components/LectureForm.jsx","components/CourseForm.jsx","components/CourseEditForm.jsx","pages/SettingsPage.jsx","App.js","serviceWorker.js","index.js"],"names":["backendUrl","backendDomain","handleResponse","res","status","data","error","message","did","a","axios","get","config","body","post","course","delete","getUser","getMe","createCourse","getAttendance","getMyClasses","createPoll","getPolls","getAttendanceByDid","getAbsences","getMyCourse","deleteCourse","Dashboardpage","props","state","Container","this","user","name","React","Component","AttendanceGraphs","attendance","filter","api","console","log","dateDict","map","record","index","timestamp","dateStr","Date","toDateString","items","Object","keys","key","sort","first","second","newState","obj","attendanceRecord","date","totalAttended","push","setState","className","width","height","stroke","fill","onMouseEnter","handleLegendMouseEnter","onMouseLeave","handleLegendMouseLeave","dataKey","value","position","type","unit","angle","activeDot","r","StudentAttendance","display","setDisplay","bind","renderTableData","test","uidDict","timestampConverted","includes","dateString","slice","Form","Label","Control","onChange","e","target","placeholder","Row","Button","onClick","style","marginTop","variant","size","id","Table","striped","bordered","hover","AttendancePage","AbsenceCard","Card","Body","Title","section_id","uid","rationale","email","startDate","endDate","AbsenceList","list_of_absences","absences","deleteAbsence","list","_id","missed_days","start","end","handleDeleteSpecificRequest","handleUpdate","handleAllDelete","AbsencePage","PollCard","CardColumns","Header","as","pollNum","Subtitle","Text","question","Link","href","PollForm","initialState","questionType","choices","handleQuestions","handleChoiceChange","handleAddChoice","submitForm","event","idx","newChoices","currChoice","sidx","concat","handleSubmit","Group","controlId","choice","PollsPage","polls","alert","show","showAlert","hideAlert","result","newPoll","currDate","options","weekday","day","Intl","DateTimeFormat","format","fullDate","poll","creator","Alert","onClose","dismissible","GeolocationButton","loading","GetGeolocation","geo","navigator","geolocation","Error","getCurrentPosition","Position","document","getElementById","removeAttribute","locationCallback","coords","setAttribute","Spinner","role","animiation","CourseForm","lectures","sections","roster","courseName","tas","handleLecturesUpload","handleRosterUpload","handleSectionsUpload","parseDays","days","match","length","newSections","s","section","rest","daysArr","sectionId","newLectures","l","toLowerCase","replace","split","header","dynamicTyping","skipEmptyLines","onSubmit","Col","onFileLoaded","parserOptions","background","borderColor","handleDelete","updateCourse","toUpperCase","Settings","App","LinkStyles","textDecoration","color","margin","Navbar","expand","to","Brand","Toggle","aria-controls","Collapse","Nav","path","Boolean","window","location","hostname","response","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2db84052.chunk.js","sourcesContent":["export default {\n    backendUrl: \"http://localhost:8080/api\",\n    backendDomain: \"http://localhost:8080\"\n}","import axios from 'axios';\nimport config from './config.js';\n\n\nfunction handleResponse(res) {\n    if (res.status < 300) return {data: res.data};\n    else if (res.status < 500) return {error: res.data.message}\n    else return {error: \"Oops, an unexpected error occured!\"}\n}\n\nasync function getUser(did) {\n    let res = await axios.get(config.backendUrl + \"/user/\"+ did);\n    if (res.status < 300) {\n        return res.data;\n    }\n}\n\nasync function getMe() {\n    let res = await axios.get(config.backendUrl + \"/me\");\n    return handleResponse(res);\n}\n\nasync function getMyClasses() {\n    let res = await axios.get(config.backendUrl + \"/me/classes\");\n    return handleResponse(res);\n}\n\nasync function getMyCourse() {\n    let res = await axios.get(config.backendUrl + \"/me/course\");\n    return handleResponse(res)\n}\n\nasync function createCourse(body) {\n    let res = await axios.post(config.backendUrl + \"/classes\", body);\n    if (res.status < 300) return true;\n}\n\nasync function updateCourse(body) {\n    let res = await axios.put(config.backendUrl + \"/classes\", body);\n    if (res.status < 300) return true;\n    console.log(res.data.message)\n}\n\nasync function getAttendance() {\n    let res = await axios.get(config.backendUrl + \"/attendance\");\n    if (res.status < 300) return res.data;\n    return false\n}\n\nasync function createPoll(body) {\n    let res = await axios.post(config.backendUrl + \"/polls\", body);\n    if (res.status < 300) return res.data;\n    return false\n}\n\nasync function getPolls() {\n    let res = await axios.get(config.backendUrl + \"/polls\");\n    if (res.status < 300) return res.data;\n    return false\n}\n\nasync function getAttendanceByDid(did){\n    let res = await axios.get(config.backendUrl + \"/attendance/\" + did);\n    if (res.status < 300) return res.data;\n    return false\n}\n\nasync function getAbsences(){\n    let res = await axios.get(config.backendUrl + \"/absences\");\n    if (res.status < 300) return res.data;\n    return false\n}\n\nasync function deleteCourse(course) {\n    let res = await axios.delete(config.backendUrl + \"/classes/\" +course)\n    return handleResponse(res);\n}\n\n\nexport default {getUser, getMe, createCourse, getAttendance, \n    getMyClasses, createPoll, getPolls, getAttendanceByDid,\n    getAbsences, getMyCourse, deleteCourse}","import React from 'react';\nimport api from '../api'\nimport {Container} from 'react-bootstrap'\nexport default class Dashboardpage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <Container >\n                <h4>{\"Welcome to Engage, \" + this.props.user.name}</h4>\n            </Container>\n            \n        );\n    }\n}","import React, {Component} from 'react';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, ReferenceLine,\n    ReferenceDot, Tooltip, CartesianGrid, Legend, Brush, ErrorBar, AreaChart, Area,\n    Label, LabelList } from 'recharts'\nimport api from '../api';\n\nexport default class AttendanceGraphs extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {attendance: [], filter: {}\n        }\n    }\n    componentWillMount(){\n        \n\n    }\n\n    async componentDidMount() {\n        let data = await api.getAttendance();\n        console.log(data);\n\n        var dateDict = {}\n        data.map((record, index) => {\n            // Day of the week dateArray[0]\n            // Month dateArray[1]\n            // Numerical day of the month dateArray[2]\n            // Year dateArray[3]\n            console.log(record.timestamp);\n            const timestampConverted = new Date(record.timestamp)\n            var dateStr = timestampConverted.toDateString() \n\n            if (dateStr in  dateDict) {\n                dateDict[dateStr] += 1;\n            } else {\n                dateDict[dateStr] = 1;\n            }\n\n        });\n        \n        // Sorting for date dictionary so that dates will always be in ascending order\n        // when visualizing in graph.\n\n        var items = Object.keys(dateDict).map(function(key) {\n            return [key, dateDict[key]]\n        })\n        items.sort(function(first, second) {\n            var date1 = new Date(first)\n            var date2 = new Date(second)\n            return date1 > date2 \n        })\n        var newState = []\n        items.map(function(obj) {\n            const attendanceRecord = {date: obj[0], totalAttended: obj[1]}\n            newState.push(attendanceRecord);\n        })\n        this.setState({attendance: newState});\n\n    }\n\n    render(){\n        return (\n            <div className='line-charts-wrapper' width=\"150px\">\n                <LineChart width={1100} height={600} data={this.state.attendance}>\n                    <CartesianGrid stroke=\"#f5f5f5\" fill=\"#e6e6e6\" />\n                    <Legend\n                        onMouseEnter={this.handleLegendMouseEnter}\n                        onMouseLeave={this.handleLegendMouseLeave}\n                    />\n                    <XAxis dataKey=\"date\" height={40}>\n                    <Label value=\"Current Week\" position=\"insideBottom\" />\n                    </XAxis>\n                    <YAxis type=\"number\" dataKey=\"totalAttended\" unit=\"\">\n                    <Label value=\"Amount of Students\" position=\"\" angle={-90} />\n                    </YAxis>\n                    <Tooltip />\n                    <Line type=\"monotone\" dataKey=\"totalAttended\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                    \n                </LineChart>\n            </div>\n        )\n    }\n} ","import React, {Component} from 'react';\nimport {Form, Button, Col, Container, Table} from 'react-bootstrap'\nimport api from '../api';\n\nexport default class StudentAttendance extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {attendance: \"\", did: \"\", display: \"none\"}\n        this.setDisplay = this.setDisplay.bind(this);\n        this.renderTableData = this.renderTableData.bind(this);\n        this.test = this.test.bind(this);\n    }\n\n    async renderTableData(){\n        this.setState({display:\"block\"});\n        let data = await api.getAttendance();\n        console.log(this.state.did)\n\n        var uidDict = {}\n        data.map(function (record, index) {\n            console.log(record.timestamp);\n            const timestampConverted = new Date(record.timestamp)\n            if (record.did in uidDict){\n                if (uidDict[record.did].includes(timestampConverted.toDateString())){\n                } else {\n                    uidDict[record.did].push(timestampConverted.toDateString())\n                }\n            } else {\n                uidDict[record.did] = [timestampConverted.toDateString()]\n            }\n        })\n        uidDict[this.state.did].sort(function(first, second) {\n            var date1 = new Date(first)\n            var date2 = new Date(second)\n            return date1 > date2 \n        })\n        var dateString = \"\"\n        uidDict[this.state.did].map(function(date, index) {\n            dateString += date + \", \"\n        })\n        dateString = dateString.slice(0, -2)\n        this.setState({attendance: dateString})\n    }\n\n    setDisplay(){\n        this.setState({display:\"block\"});\n    }\n\n    test(){\n        console.log(\"hello\")\n    }\n\n    render() {\n        return (\n            <div>\n                <Form>\n                    <Form.Label> Filter Student </Form.Label>\n                    <Form.Control\n                        onChange={(e) => {this.setState({did: e.target.value})}} \n                        value={this.state.did}\n                        type=\"text\" \n                        placeholder=\"Enter student directory id\" \n                    />\n                    <Form.Row><Button onClick={this.renderTableData} style={{marginTop: \"10px\"}} variant=\"success\" size=\"md\">Search</Button></Form.Row>\n                </Form>\n                <h1 id='title' style={{display:this.state.display}}>Attendance</h1>\n                <div id=\"student_attendance\" style={{display:this.state.display}}>\n                {/* <h1 id='title' >Attendance</h1>\n                <div id=\"student_attendance\" > */}\n                    <Table striped bordered hover id='student'>\n                        <tr>\n                            <th>Directory ID</th>\n                            <th>Dates Attended</th>\n                        </tr>\n                            <tbody>\n                                <tr key={this.state.did}>\n                                    <td>{this.state.did}</td>\n                                    <td>{this.state.attendance}</td>\n                                </tr>\n                            </tbody>\n                    </Table>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport api from '../api'\nimport AttendanceGraphs from '../components/AttendanceGraphs';\nimport StudentAttendance from '../components/StudentAttendance';\nimport { Container } from 'react-bootstrap';\n\nexport default class AttendancePage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {attendance: [], filter: {}}\n    }\n\n    async componentDidMount() {\n        \n    }\n\n    render() {\n        return (\n            <div>\n                <h3 className=\"text-center mt-4\">Class Attendance</h3>\n                <Container>\n                    <AttendanceGraphs />\n                </Container>\n                <Container>\n                    <StudentAttendance />\n                </Container>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Button, Card} from 'react-bootstrap';\nimport {\n    BrowserRouter as Router,\n    Link,\n    useLocation,\n    Switch, \n    Route\n  } from \"react-router-dom\";\n  //import email from 'react-native-email';\n\n  const APPROVAL_SUBJECT_TEXT = \"Your request has been approved\"; \n  const DENIAL_SUBJECT_TEXT = \"Your request has been denied\"; \n\n  const APPROVAL_BODY_TEXT = \"Your request has been approved\"; \n  const DENIAL_BODY_TEXT = \"Your request has been approved\"; \n\n\n\n  export default class AbsenceCard extends React.Component {\n    \n    // sendEmail(subject, body){\n\n    //   const to = [this.props.email] // string or array of email addresses\n    //     email(to, {\n    //         // Optional additional arguments\n    //         subject: subject,\n    //         body: body\n    //     }).catch(console.error)\n\n    // }\n\n    // handleApprove(){\n\n    //   this.sendEmail(APPROVAL_SUBJECT_TEXT, APPROVAL_BODY_TEXT); \n    // }\n\n    // handleReject(){\n    //   this.sendEmail(DENIAL_SUBJECT_TEXT, DENIAL_BODY_TEXT); \n    // }\n    \n    // handleCustom(){\n    //   this.sendEmail(\"\",\"\"); \n    // }\n   \n    \n    render() {\n       \n         return (\n                <div>    \n                <Card >\n                <Card.Body>\n                <Card.Title>{this.props.section_id}</Card.Title>\n                    <h3><strong>Directory ID: </strong>  {this.props.uid}</h3>\n                    <h4><strong>Request Type: </strong> {this.props.type}</h4>\n                    <h5><strong>Student Reason: </strong> {this.props.rationale}</h5>\n                    <h6><strong>Student Email: </strong>{this.props.email}</h6>\n                    <h6><strong>Start Date: </strong>{this.props.startDate}</h6>\n                    <h6><strong>End Date: </strong>{this.props.endDate}</h6>\n                {/* <Button> Approve</Button>\n                <Button >Deny</Button>\n                <Button >Custom</Button> */}\n                </Card.Body>\n                </Card>\n\n                </div>\n             )\n    }\n   \n  \n} \n\n","import React, {Label} from 'react';\nimport { Button, Card } from 'react-bootstrap';\nimport api from '../api';\nimport {\n    BrowserRouter as Router,\n    Link,\n    useLocation,\n    Switch, \n    Route\n  } from \"react-router-dom\";\nimport AbsenceCard from \"./AbsenceCard\";\n  export default class AbsenceList extends React.Component {\n\n    constructor(props){\n        super(props); \n        this.state = { list_of_absences:[] }\n    }\n    \n    async componentDidMount(){\n        let absences = await api.getAbsences();\n        this.setState({list_of_absences: absences});\n    } \n\n    async handleAllDelete(){\n        await api.deleteAbsence();\n    }\n    \n    render() {\n        \n        let list = (this.state.list_of_absences).map((data) => {\n            return (\n            <div>\n                <Card>\n                    <AbsenceCard\n                    id={data._id}\n                    section_id = {data.section_id}    \n                    type={data.type} \n                    rationale={data.rationale}\n                    uid={data.uid}\n                    email={data.email}\n                    startDate={data.missed_days.start}\n                    endDate={data.missed_days.end}\n                    />\n                    <button onClick={() => this.handleDeleteSpecificRequest(data._id)}>Delete</button>\n                    <br/>\n                </Card>\n            </div>\n               \n                )\n        })\n\n         return (\n               <div>\n                   <Button onClick={this.handleUpdate}>Refresh</Button>\n                   <span style={{width: 10}}>                      </span>\n                   <Button onClick={this.handleAllDelete}> Delete All Requests </Button>\n                   <br/>\n                   <br/>\n                   <br/>\n                   {list}\n               </div>\n             )\n    }\n} \n\n","import React, {Label} from 'react';\nimport AbsenceList from \"../components/AbsenceList\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    Redirect,\n    useParams,\n    useRouteMatch\n  } from \"react-router-dom\";\n\n\nexport default function AbsencePage() {\n\n    \n\n  \n        return (\n        <div>\n            <h1>Active Absence Reports</h1>\n            <AbsenceList /> \n        </div>\n        );\n    \n}","import React, {Component} from 'react';\r\nimport { Button, Card, CardColumns } from 'react-bootstrap';\r\n\r\nexport default class PollCard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n\r\n            <CardColumns>\r\n            <Card>\r\n                <Card.Header as=\"h5\"> Poll #{this.props.pollNum + 1} </Card.Header>\r\n                <Card.Body>\r\n                    <Card.Title> Opened on {this.props.date}</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">{this.props.type}</Card.Subtitle>\r\n                    <Card.Text> {this.props.question} </Card.Text>\r\n                    <Card.Link href=\"#\">Close</Card.Link>\r\n                    <Card.Link href=\"#\">Delete</Card.Link>\r\n                    <Card.Link href=\"#\">View Answers</Card.Link>\r\n                </Card.Body>\r\n            </Card>\r\n            </CardColumns>\r\n            \r\n        )\r\n        \r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport config from '../config';\r\n\r\n\r\nexport default class PollForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialState = {\r\n            question: '',\r\n            questionType: 'free',\r\n            choices: [],\r\n        }\r\n\r\n        this.state = this.initialState;\r\n        this.handleQuestions = this.handleQuestions.bind(this);\r\n        this.handleChoiceChange = this.handleChoiceChange.bind(this);\r\n        this.handleAddChoice = this.handleAddChoice.bind(this);\r\n        this.submitForm = this.submitForm.bind(this);\r\n    }\r\n\r\n    handleQuestions(event) {\r\n     \r\n        const { name, value } = event.target;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    }\r\n\r\n    handleChoiceChange(idx, event) {\r\n\r\n        const newChoices = this.state.choices.map((currChoice, sidx) => {\r\n            if(idx !== sidx) return currChoice;\r\n            return event.target.value;\r\n        });\r\n\r\n        this.setState({\r\n            choices: newChoices\r\n        });\r\n    }\r\n\r\n    handleAddChoice() {\r\n\r\n        this.setState({\r\n            choices: this.state.choices.concat(['']),\r\n        })\r\n    }\r\n\r\n    submitForm() {\r\n\r\n        this.props.handleSubmit(this.state);\r\n        this.setState(this.initialState);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Form>\r\n            <Form.Group controlId=\"question\">\r\n                <Form.Label>Question</Form.Label>\r\n                <Form.Control \r\n                as=\"textarea\" \r\n                placeholder=\"Enter question for poll\"\r\n                name=\"question\"\r\n                value={this.state.question}\r\n                onChange={this.handleQuestions} \r\n                />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"questionType\">\r\n                <Form.Label>Question Type</Form.Label>\r\n                <Form.Control \r\n                as=\"select\" \r\n                name=\"questionType\"\r\n                value={this.state.questionType}\r\n                onChange={this.handleQuestions}>\r\n                    <option value=\"text\">Free Response</option>\r\n                    <option value=\"choice\">Multiple Choice</option>\r\n                </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"choices\">\r\n                <Form.Label>Answer Choices</Form.Label>\r\n                <Form.Text className=\"text-muted\">\r\n                    Provide only if question type is Multiple Choice.\r\n                </Form.Text>\r\n\r\n                {this.state.choices.map((choice,idx) => {\r\n                    return <Form.Row>\r\n                            <Form.Control \r\n                            type=\"text\" \r\n                            placeholder={`Answer #${idx + 1}`}\r\n                            name=\"choices\"\r\n                            value={choice}\r\n                            onChange={(e) => this.handleChoiceChange(idx, e)}/>\r\n                    </Form.Row>\r\n                })}\r\n\r\n                <Button variant=\"primary\" onClick={this.handleAddChoice}>\r\n                    Add Choice\r\n                </Button>\r\n            </Form.Group>\r\n\r\n            <Button style={{marginTop: \"10px\"}} variant=\"success\" size=\"md\" onClick={this.submitForm}>\r\n                Create Poll\r\n            </Button>\r\n            </Form>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\nimport PollCard from '../components/PollCard'\nimport PollForm from '../components/PollForm'\nimport { Container, Alert } from 'react-bootstrap';\nimport config from '.././config'\nimport axios from 'axios'\nimport api from '../api';\n\nexport default class PollsPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n    \n        this.initialState = {\n            polls: [],\n            alert: {show: false, type: \"\", message: \"\"},\n        }\n    \n        this.state = this.initialState;\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.showAlert = this.showAlert.bind(this);\n        this.hideAlert = this.hideAlert.bind(this);\n    }\n\n    async componentDidMount() {\n        \n        try{\n            let result = await api.getPolls();\n            this.setState({polls: result});\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    showAlert(type, message) {\n        this.setState({alert: {show: true, type, message}})\n    }\n    hideAlert() {\n        this.setState({alert: {show: false, type: \"\", message: \"\"}})\n    }\n\n    async handleSubmit(newPoll) {\n\n        let currDate = new Date();\n        let options = { weekday: 'long'};\n        let day = new Intl.DateTimeFormat('en-US', options).format(currDate);\n        let fullDate = new Intl.DateTimeFormat('en-US').format(currDate);\n        let dateStr = day + \", \" + fullDate;\n      \n        let poll = {\n            question: newPoll.question,\n            type: newPoll.questionType,\n            choices: newPoll.choices,\n            creator: this.props.creator,\n            date: dateStr,\n        }\n  \n        let success = await api.createPoll(poll);\n        if (success) {\n            this.showAlert(\"success\", \"Poll successfully created\")\n        } else {\n            this.showAlert(\"danger\", \"The Poll could not be created\")\n        }    \n        \n        this.setState({\n          polls: [...this.state.polls, poll]\n        })\n    }\n\n    render() {\n\n        let list = this.state.polls.map((poll, idx) => {\n            return (<PollCard type={poll.type} question={poll.question} date={poll.date} pollNum={idx}/>)\n        }); \n    \n        return (\n            <div>\n                {this.state.alert.show && \n                    <Alert \n                        variant={this.state.alert.type} \n                        onClose={this.hideAlert}\n                        dismissible\n                    >\n                        {this.state.alert.message}\n                    </Alert>\n                }\n                <h3 className=\"text-center mt-4\">Polls</h3>\n                <Container>\n                    <h4>Create a New Poll</h4>\n                    <PollForm handleSubmit={this.handleSubmit}/>\n                </Container>\n                \n                <div id=\"openPolls\">\n                    <h4 className=\"text-center mt-4\">Open Polls</h4>\n                    {list}\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Container, Col, Row, Button} from 'react-bootstrap';\n\nexport default class LectureDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleDelete = this.handleDelete.bind(this)\n    }\n\n    handleDelete() {\n        this.props.removeLecture(this.props.lectureName)\n    }\n\n    render() {\n        return (\n            <Container className=\"mb-3\">\n                <Row>\n                    <Col>\n                        {this.props.lectureName}\n                    </Col>\n                    <Col>\n                        <a style={{textDecoration: \"none\", \"cursor\": \"pointer\", \"color\": \"red\"}} onClick={this.handleDelete}>X</a>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}","import React from 'react';\nimport {Button, Spinner} from 'react-bootstrap'\nexport default class GeolocationButton extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false}\n        this.GetGeolocation = this.GetGeolocation.bind(this);\n    }\n\n    GetGeolocation() {\n        const geo = navigator.geolocation;\n\n        if (!geo) {\n           throw new Error(\"Geolocation not supported!\")\n        }\n\n        geo.getCurrentPosition((Position) => {\n            this.setState({loading: false})\n            document.getElementById(\"geolocate\").removeAttribute(\"disabled\")\n            this.props.locationCallback(Position.coords)\n        }, (error) => {\n            this.setState({loading: false})\n            console.error(error);\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Button \n                    id=\"geolocate\"\n                    size=\"sm\" \n                    onClick={() => {\n                        document.getElementById(\"geolocate\").setAttribute(\"disabled\", \"true\")\n                        this.setState({loading: true})\n                        this.GetGeolocation()\n                    }}\n                >\n                    {\n                        this.state.loading \n                        ? [<Spinner key={1} as=\"span\" role=\"status\" size=\"sm\" animiation=\"border\" />, <span key={2}>Loading...</span>]\n                        : <span>Use Current Location</span>\n                    }\n                </Button>\n                <p>Note: A GPS equipped device is necessary for accurate results. Otherwise, use coordinates given by <a href=\"https://maps.google.com\">Google Maps</a> when clicking on a building.</p>\n            </div>  \n        ); \n    }\n   \n};","import React from \"react\";\nimport {Form, Col, Container, Button} from 'react-bootstrap'\nimport CSVReader from \"react-csv-reader\";\nimport GeolocationButtion from './GeolocationButton';\nimport TimePicker from 'react-time-picker';\n\nexport default class LectureForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.default = {\n            lat: \"\",\n            lng: \"\",\n            radius: \"\",\n            sections: [],\n            days: {\"M\": false, \"T\": false, \"W\": false, \"Th\": false, \"F\": false},\n            start: \"\",\n            end: \"\",\n            lectureName: \"\"\n        }\n        this.state = Object.assign({}, this.default)\n        this.handleGeolocation = this.handleGeolocation.bind(this)\n        this.handleSectionUpload = this.handleSectionUpload.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n    }\n\n     handleGeolocation(coords) {\n        this.setState({lat: coords.latitude, lng: coords.longitude})\n    }\n    \n    handleSectionUpload(sections) {\n        let newSections = sections.map(s => {\n            let {section, days, ...rest} = s;\n            try{\n                let re = /[A-Z][a-z]?/g\n                let daysArr = days.match(re)\n                return {...rest, days: daysArr, sectionId: section}\n            } catch (e) {\n                this.props.showAlert()\n            }\n           \n        })\n        this.setState({sections: newSections})\n    }\n\n    handleSave() {\n        let days = Object.keys(this.state.days).reduce((acc, d) => {\n            return this.state.days[d] ? acc.concat(d) : acc\n        }, [])\n        let sections = this.state.sections.map(section => {\n\n            let validated = (section.lat === null || section.lng === null) \n                ? {lat: parseFloat(this.state.lat), lng: parseFloat(this.state.lng)}\n                : {}\n            return Object.assign({...section}, validated)\n        })\n\n        this.props.saveLecture(Object.assign({...this.state}, {days, sections}));\n        this.setState(this.default)\n    }\n\n    render() {\n        const options = {\n            header: true,\n            dynamicTyping: true,\n            skipEmptyLines: true\n        }\n        return (\n            <Container variant=\"light\">\n            <Form.Group>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>Lecture Name</Form.Label>\n                        <Form.Control onChange={(e) => this.setState({lectureName: e.target.value})} value={this.state.lectureName} type=\"text\" placeholder=\"CMSC216-01\" />\n                    </Form.Group>\n                    <Form.Group as={Col}>\n                        <Form.Label>Sections</Form.Label>\n                        <CSVReader\n                            onFileLoaded={this.handleSectionUpload}\n                            parserOptions={options}\n                        />\n                    </Form.Group>\n                </Form.Row>\n            <Form.Label>Meeting Days</Form.Label>\n            <Form.Group>\n                {\n                    [\"M\", \"T\", \"W\", \"Th\", \"F\"].map((day) => \n                        <Form.Check \n                            inline \n                            label={day}\n                            id={day} \n                            onChange={({target}) => {\n                                let next = {}\n                                next[target.id] = !this.state.days[target.id]\n                                this.setState({\n                                    days: Object.assign(this.state.days, next)\n                                });\n                            }}\n                            value={this.state.days[day]}\n                            type=\"checkbox\" \n                        />\n                    )\n                }       \n            </Form.Group>\n        \n            <Form.Row>\n            <Form.Label className=\"mr-2\">Lecture Start</Form.Label>\n                <Form.Group >\n                    <TimePicker\n                        onChange={(time) => {\n                            this.setState({start: time})\n                        }}\n                        value={this.state.start}\n                        disableClock={true}\n                    />\n                </Form.Group>\n                <Form.Label className=\"ml-3 mr-2\">Lecture End</Form.Label>\n                <Form.Group >\n                    <TimePicker\n                        onChange={(time) => {\n                            this.setState({end: time})\n                        }}\n                        value={this.state.end}\n                        disableClock={true}\n                    />\n                </Form.Group>\n            </Form.Row>\n            \n\n            <Form.Row>\n                <Form.Group as={Col} >\n                <Form.Label>Latitude</Form.Label>\n                <Form.Control onChange={(e) => this.setState({lat: e.target.value})} value={this.state.lat} />\n                </Form.Group>\n\n                <Form.Group as={Col} >\n                <Form.Label>Longitude</Form.Label>\n                <Form.Control onChange={(e) => this.setState({lng: e.target.value})} value={this.state.lng} />\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                <Form.Label>Radius (meters)</Form.Label>\n                <Form.Control onChange={(e) => this.setState({radius: e.target.value})} value={this.state.radius} placeholder=\"10\" />\n                </Form.Group>\n            </Form.Row>\n            <Form.Row>\n                <Form.Group as={Col} >\n                    <GeolocationButtion locationCallback={this.handleGeolocation}/>\n                </Form.Group>\n            </Form.Row>\n            <Form.Row><Button onClick={this.handleSave}>Save Lecture</Button></Form.Row>\n        </Form.Group>\n        </Container>\n        )\n    }\n}","import React from 'react';\nimport {Form, Button, Col, Container} from 'react-bootstrap'\nimport CSVReader from \"react-csv-reader\";\nimport LectureDisplay from \"./LectureDisplay\";\nimport LectureForm from './LectureForm';\nimport api from '../api';\n\nexport default class CourseForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {lectures: [], sections: [], roster: [], courseName: \"\", tas: \"\"}\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleLecturesUpload = this.handleLecturesUpload.bind(this);\n        this.handleRosterUpload = this.handleRosterUpload.bind(this);\n        this.handleSectionsUpload = this.handleSectionsUpload.bind(this);\n    }\n\n    async handleSubmit() {\n        try {\n            const parseDays = (days) => {\n                try{\n                    return days.match(/[A-Z][a-z]?/g)\n                       \n                } catch (e) {\n                    throw new Error(\"Invalid date character, must be M T W Th F \")\n                }\n             }   \n\n            if (this.state.lectures.length == 0) return this.props.showAlert(\"warning\", \"Lectures cannot be empty\");\n            else if (this.state.sections.length == 0) return this.props.showAlert(\"warning\", \"Sections cannot be empty\");\n            else if (this.state.roster.length == 0) return this.props.showAlert(\"warning\", \"Roster cannot be empty\");\n            else if (this.state.courseName == 0) return this.props.showAlert(\"warning\", \"Course Name cannot be empty\");\n\n            let newSections = this.state.sections.map(s => {\n                let {section, days, ...rest} = s;\n                let daysArr = parseDays(days) \n                if (daysArr) return {...rest, days: daysArr, sectionId: section}\n                return;\n            });\n            let newLectures = this.state.lectures.map(l =>{\n                let {days, ...rest} = l;\n                let daysArr = parseDays(days)\n                if (daysArr) return {...rest, days: daysArr}\n                return;\n            })\n            let course = {\n                courseName: this.state.courseName.toLowerCase(),\n                roster: this.state.roster,\n                lectures: newLectures,\n                sections: newSections,\n                tas: this.state.tas.replace(' ', '').split(',')\n            }\n            let success = await api.createCourse(course);\n            if (success) {\n                this.props.showAlert(\"success\", \"Course successfully created\")\n                \n            } else {\n                this.props.showAlert(\"danger\", \"The Course could not be created\")\n            }\n        } catch(e) {\n            console.error(e)\n            this.props.showAlert(\"danger\", e.message)\n        }\n        \n    }\n\n    // handleSaveLecture(lecture) {\n    //     this.setState({lectures: this.state.lectures.concat(lecture)});\n    // }\n    // handleRemoveLecture(lectureName) {\n    //     let removeIdx = this.state.lectures.findIndex(l => l.lectureName === lectureName);\n    //     this.setState({lectures: this.state.lectures.slice(0, removeIdx).concat(this.state.lectures.slice(removeIdx+1))})\n    // }\n\n    handleRosterUpload(data) {\n        this.setState({roster: data});\n    }\n\n    handleSectionsUpload(data) {\n        this.setState({sections: data})\n    }\n\n    handleLecturesUpload(data) {\n        this.setState({lectures: data})\n    }\n\n    render() {\n        const options = {\n            header: true,\n            dynamicTyping: true,\n            skipEmptyLines: true,\n        }\n        return  (\n            <Form onSubmit={this.handleSubmit}>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>Course Name</Form.Label>\n                        <Form.Control \n                            onChange={(e) => {this.setState({courseName: e.target.value})}} \n                            value={this.state.courseName} \n                            type=\"text\" \n                            placeholder=\"CMSC216\" \n                        />\n                    </Form.Group>\n                    \n                </Form.Row>\n                <Form.Group>\n                    <Form.Label>Comma-seperated TA Directory Ids</Form.Label>\n                    <Form.Control \n                        type=\"text\"\n                        onChange={(e)=>{this.setState({tas:e.target.value})}}\n                        value={this.state.tas}\n                    />\n                </Form.Group>\n                <Form.Row>\n                    <Form.Group as={Col} >\n                        <Form.Label>Roster</Form.Label>\n                        <CSVReader\n                            onFileLoaded={this.handleRosterUpload}\n                            parserOptions={options}\n                        />\n                    </Form.Group>\n\n                    <Form.Group as={Col} >\n                        <Form.Label>Lectures</Form.Label>\n                        <CSVReader\n                            onFileLoaded={this.handleLecturesUpload}\n                            parserOptions={options}\n                        />\n                    </Form.Group>\n                    <Form.Group as={Col} >\n                        <Form.Label>Sections</Form.Label>\n                        <CSVReader\n                            onFileLoaded={this.handleSectionsUpload}\n                            parserOptions={options}\n                        />\n                    </Form.Group>\n                </Form.Row>\n       \n                <Form.Row><Button onClick={this.handleSubmit} style={{marginTop: \"10px\", background: \"#990000\", borderColor: \"#990000\"}}  size=\"md\">Create Course</Button></Form.Row>\n               \n            </Form>\n        )\n    }\n}","import React from 'react';\r\nimport {Button, Col, Container, Row} from 'react-bootstrap'\r\nimport CSVReader from \"react-csv-reader\";\r\nimport api from '../api';\r\n\r\nexport default class CourseForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {lectures: [], sections: [], roster: [], courseName: \"\", tas: \"\"}\r\n        this.handleLecturesUpload = this.handleLecturesUpload.bind(this);\r\n        this.handleRosterUpload = this.handleRosterUpload.bind(this);\r\n        this.handleSectionsUpload = this.handleSectionsUpload.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n    }\r\n\r\n    async handleUpdate() {\r\n        try {\r\n            const parseDays = (days) => {\r\n                try{\r\n                    return days.match(/[A-Z][a-z]?/g)\r\n                } catch (e) {\r\n                    throw new Error(\"Invalid date character, must be M T W Th F \")\r\n                }\r\n            };\r\n            let newSections = this.state.sections.map(s => {\r\n                let {section, days, ...rest} = s;\r\n                let daysArr = parseDays(days) \r\n                if (daysArr) return {...rest, days: daysArr, sectionId: section}\r\n                return;\r\n            })\r\n            let newLectures = this.state.lectures.map(l =>{\r\n                let {days, ...rest} = l;\r\n                let daysArr = parseDays(days)\r\n                if (daysArr) return {...rest, days: daysArr}\r\n                return;\r\n            })\r\n            let course = {\r\n                courseName: this.state.courseName.toLowerCase(),\r\n                roster: this.state.roster,\r\n                lectures: newLectures,\r\n                sections: newSections,\r\n                tas: this.state.tas.replace(' ', '').split(',')\r\n            }\r\n            let success = await api.updateCourse(course);\r\n            if (success) {\r\n                this.props.showAlert(\"success\", \"Course successfully updated\")\r\n            } else {\r\n                this.props.showAlert(\"danger\", \"The Course could not be updated\")\r\n            }\r\n        } catch(e) {\r\n            this.props.showAlert(\"danger\", e.message)\r\n        }\r\n        \r\n    }\r\n\r\n    async handleDelete() {\r\n        let res = await api.deleteCourse(this.props.course);\r\n        if (!res.error) this.props.showAlert(\"Successfully deleted course\")\r\n    }\r\n\r\n    handleRosterUpload(data) {\r\n        this.setState({roster: data});\r\n    }\r\n\r\n    handleSectionsUpload(data) {\r\n        this.setState({sections: data})\r\n    }\r\n\r\n    handleLecturesUpload(data) {\r\n        this.setState({lectures: data})\r\n    }\r\n\r\n    render() {\r\n        const options = {\r\n            header: true,\r\n            dynamicTyping: true,\r\n            skipEmptyLines: true,\r\n        }\r\n        return  (\r\n            <Container>\r\n            <Row>\r\n                <h4 as={Col}>{this.props.course.toUpperCase()}</h4>\r\n                <div as={Col} className=\"ml-5\" style={{width: \"80px\", height: \"50px\"}}>\r\n                    <Button size=\"sm\" variant=\"danger\" onClick={this.handleDelete}>Delete</Button>\r\n                </div>\r\n                \r\n            </Row>\r\n            \r\n            <table>\r\n                <tr>\r\n                    <th>Roster</th>\r\n                    <th>Lectures</th>\r\n                    <th>Sections</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <CSVReader\r\n                            onFileLoaded={this.handleRosterUpload}\r\n                            parserOptions={options}\r\n                        />\r\n                    </td>\r\n                    <td>\r\n                        <CSVReader\r\n                            onFileLoaded={this.handleLecturesUpload}\r\n                            parserOptions={options}\r\n                        />\r\n                    </td>\r\n                    <td>\r\n                        <CSVReader\r\n                            onFileLoaded={this.handleSectionsUpload}\r\n                            parserOptions={options}\r\n                        />\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <Button onClick={this.handleUpdate} style={{marginTop: \"10px\", background: \"#990000\", borderColor: \"#990000\"}}  size=\"md\">Update Course</Button>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport CourseForm from '../components/CourseForm'\nimport CourseEditForm from '../components/CourseEditForm'\nimport { Container, Alert } from 'react-bootstrap';\nimport api from '../api';\n\nexport default class Settings extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {course: \"\", alert: {show: false, type: \"\", message: \"\"}}\n        this.showAlert = this.showAlert.bind(this);\n        this.hideAlert = this.hideAlert.bind(this);\n    }\n\n    showAlert(type, message) {\n        this.setState({alert: {show: true, type, message}})\n    }\n\n    hideAlert() {\n        this.setState({alert: {show: false, type: \"\", message: \"\"}})\n    }\n\n    async componentDidMount() {\n        let {data} = await api.getMyClasses();\n        if (data.length) this.setState({course: data[0].courseName})\n    }\n\n    render() {\n        return (\n  \n                <div>\n                    {this.state.alert.show && \n                        <Alert \n                            variant={this.state.alert.type} \n                            onClose={this.hideAlert}\n                            dismissible\n                        >\n                            {this.state.alert.message}\n                        </Alert>\n                    }\n                    <h3 className=\"text-center mt-4\">Settings</h3>\n                    <Container>\n                        {\n                            (this.state.course !== \"\" )\n                            ? (\n                                <div>\n                                    <h4>Edit Course</h4>\n                                    <CourseEditForm course={this.state.course} showAlert={this.showAlert} />\n                                </div>\n                                )\n                            : (\n                                <div>\n                                    <h4>Setup Course</h4>\n                                    <CourseForm showAlert={this.showAlert} />\n                                </div>\n                            )\n                        }\n          \n                    </Container>\n                    \n                </div>\n            \n        );\n    }\n}","import React from 'react';\nimport {Navbar, Nav} from 'react-bootstrap'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nimport HomePage from './pages/HomePage';\nimport AttendancePage from './pages/AttendancePage';\nimport AbsencePage from './pages/AbsencePage';\nimport PollsPage from './pages/PollsPage';\nimport SettingsPage from './pages/SettingsPage';\nimport api from './api'\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {user: {}}\n  }\n  async componentDidMount() {\n    let {data} = await api.getMe();\n    this.setState({user: data});\n  }\n \n\n  render() {\n\n    const LinkStyles = {\n      textDecoration: 'none',\n      color: 'white',\n      margin: '7px',\n    }\n    return (\n\n      <Router>\n        <Navbar style={{background: \"#990000\"}} expand=\"lg\">\n          <Link to=\"/home\"><Navbar.Brand style={{color: \"#FFFFFF\"}}>Engage</Navbar.Brand></Link>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Link style={LinkStyles} to=\"/attendance\">Attendance</Link>\n              <Link style={LinkStyles} to=\"/absence\">Absence Requests</Link>\n              <Link style={LinkStyles} to=\"/polls\">Polls</Link>\n              <Link style={LinkStyles} to=\"/settings\">Settings</Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n\n\n        <Switch>\n          <Route path=\"/home\">\n            <HomePage user={this.state.user}/>\n          </Route>\n          <Route path=\"/attendance\">\n            <AttendancePage user={this.state.user}/>\n          </Route>\n          <Route path=\"/absence\">\n            <AbsencePage user={this.state.user}/>\n          </Route>\n          <Route path=\"/polls\">\n            <PollsPage user={this.state.user}/>\n          </Route>\n          <Route path=\"/settings\">\n            <SettingsPage user={this.state.user}/>\n          </Route>\n          <Route path=\"/\">\n            <Redirect to=\"/dashboard\"/>\n          </Route>\n        </Switch>\n      </Router>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport axios from 'axios';\nimport config from './config'\nimport {Container} from 'react-bootstrap'\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\n(async () => {\n    let response = await axios.get(config.backendUrl + \"/me\");\n    if (response.status === 401) {\n        ReactDOM.render(() => {\n            return (\n                <Container>\n                    <h4 className=\"text-center\">You are not logged in. <a href=\"/login\">Login.</a></h4>\n                </Container>\n            )\n        }, document.getElementById('root'));\n    } else if (response.status === 404) {\n        ReactDOM.render(() => {return (<p>404 User Not Found</p>)}, document.getElementById('root'));\n    } else {\n        // ReactDOM.render(<App user={response.data}/>, document.getElementById('root'));\n        ReactDOM.render(<App />, document.getElementById('root'));\n    }\n})()\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}