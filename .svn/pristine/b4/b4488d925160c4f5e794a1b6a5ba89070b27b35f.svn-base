import https from 'https';
import fs from 'fs';
import path from 'path';
import crypto from 'crypto';
import Keygrip from 'keygrip';
import cookieSession from 'cookie-session';
import express from 'express';
import mongoose from 'mongoose';
import config from './config';
// import csurf from 'csurf';
import cas from 'connect-cas';
import cors from 'cors';
import user from './routes/user';
import classes from './routes/classes';

const port = config.port;
const keyPath = config.keyPath;
const certPath = config.certPath;
const useHTTPS = config.useHTTPS;
const mongoUrl = `mongodb://mongo:${config.mongoPort}/engage`;

const app = express();
app.use(cors());

app.use(express.json())
app.use((req, res, next) => {
    // request logger
    console.log(req.method + " " + req.originalUrl)
    next()
})

let secretKeys;
// Cookie hash secret to prevent or at least reduce the possibility for cookie hijacking.
if (process.env.SECRET_SESSION){
    secretKeys = process.env.SECRET_SESSION.split("&")
} else secretKeys = [crypto.randomBytes(32).toString('base64')]

// Need to implement this
// let xcsrf = csurf({cookie: true})

app.use(cookieSession({
    secure: true,
    keys: new Keygrip(secretKeys),
    maxAge: 48 * 60 * 60 * 1000
}));

cas.configure({
    host: "shib.idm.umd.edu/shibboleth-idp/profile/",
    protocol: "https",
    path: {
        login: "/login",
        serviceValidate: "/serviceValidate"
    }
})


if (process.env.NODE_ENV === 'development')
    app.use((req,res,next) => {
        // skip authentication and set as desired user
        req.session.cas = {user: "lherman"},
        next()
    })
else {
    app.use(cas.serviceValidate());
    app.use(cas.authenticate());
}
// app.use(express.static(__dirname + ))
async function connectToDatabase() {
    try {
        let client = await mongoose.connect(mongoUrl, { autoReconnect: true, useNewUrlParser: true});
        if (useHTTPS) {
            https.createServer({
                key: fs.readFileSync(path.join(__dirname, keyPath)),
                cert: fs.readFileSync(path.join(__dirname, certPath))
            }, app).listen(port, (err: any) => {
                if (err) console.error(err);
                console.log(`Server listening over https on port ${port}`)
            })
        } else {
            app.listen(port, (err) => {
                if (err) console.error(err);
                console.log(`Server listening over http on port ${port}`);
            })
        }
    
    } catch (e) {
        console.error(e)
    }
}

connectToDatabase();

app.get('/', (req, res) => {
    res.send(path.join(__dirname + "../client/build/index.html"))
})

app.get("/api/me", user.me)
app.get("/api/users/:id/classes", user.listClasses)
app.get('/api/users', user.list)
app.post('/api/users', user.create)

app.get("/api/classes", classes.list)
app.post("/api/classes", classes.create)

