{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import React from'react';import Dimensions from\"react-native-web/dist/exports/Dimensions\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{ThemeColors,ThemeContext,SceneView}from'@react-navigation/core';import DrawerLayout from'react-native-gesture-handler/DrawerLayout';import{ScreenContainer}from'react-native-screens';import DrawerActions from\"../routers/DrawerActions\";import DrawerSidebar from\"./DrawerSidebar\";import DrawerGestureContext from\"../utils/DrawerGestureContext\";import ResourceSavingScene from\"../views/ResourceSavingScene\";var DrawerView=function(_React$PureComponent){_inherits(DrawerView,_React$PureComponent);function DrawerView(){var _getPrototypeOf2;var _this;_classCallCheck(this,DrawerView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(DrawerView)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={loaded:[_this.props.navigation.state.index],drawerWidth:typeof _this.props.navigationConfig.drawerWidth==='function'?_this.props.navigationConfig.drawerWidth():_this.props.navigationConfig.drawerWidth};_this.drawerGestureRef=React.createRef();_this._handleDrawerStateChange=function(newState,willShow){if(newState==='Idle'){if(!_this.props.navigation.state.isDrawerIdle){_this.props.navigation.dispatch({type:DrawerActions.MARK_DRAWER_IDLE,key:_this.props.navigation.state.key});}}else if(newState==='Settling'){_this.props.navigation.dispatch({type:DrawerActions.MARK_DRAWER_SETTLING,key:_this.props.navigation.state.key,willShow:willShow});}else{if(_this.props.navigation.state.isDrawerIdle){_this.props.navigation.dispatch({type:DrawerActions.MARK_DRAWER_ACTIVE,key:_this.props.navigation.state.key});}}};_this._handleDrawerOpen=function(){_this.props.navigation.dispatch({type:DrawerActions.DRAWER_OPENED,key:_this.props.navigation.state.key});};_this._handleDrawerClose=function(){_this.props.navigation.dispatch({type:DrawerActions.DRAWER_CLOSED,key:_this.props.navigation.state.key});};_this._updateWidth=function(){var drawerWidth=typeof _this.props.navigationConfig.drawerWidth==='function'?_this.props.navigationConfig.drawerWidth():_this.props.navigationConfig.drawerWidth;if(_this.state.drawerWidth!==drawerWidth){_this.setState({drawerWidth:drawerWidth});}};_this._renderNavigationView=function(drawerOpenProgress){return React.createElement(DrawerGestureContext.Provider,{value:_this.drawerGestureRef},React.createElement(DrawerSidebar,_extends({screenProps:_this.props.screenProps,drawerOpenProgress:drawerOpenProgress,navigation:_this.props.navigation,descriptors:_this.props.descriptors,contentComponent:_this.props.navigationConfig.contentComponent,contentOptions:_this.props.navigationConfig.contentOptions,drawerPosition:_this.props.navigationConfig.drawerPosition,style:_this.props.navigationConfig.style},_this.props.navigationConfig)));};_this._renderContent=function(){var _this$props=_this.props,lazy=_this$props.lazy,navigation=_this$props.navigation;var loaded=_this.state.loaded;var routes=navigation.state.routes;if(_this.props.navigationConfig.unmountInactiveRoutes){var activeKey=navigation.state.routes[navigation.state.index].key;var descriptor=_this.props.descriptors[activeKey];return React.createElement(SceneView,{navigation:descriptor.navigation,screenProps:_this.props.screenProps,component:descriptor.getComponent()});}else{return React.createElement(ScreenContainer,{style:styles.pages},routes.map(function(route,index){if(lazy&&!loaded.includes(index)){return null;}var isFocused=navigation.state.index===index;var descriptor=_this.props.descriptors[route.key];return React.createElement(ResourceSavingScene,{key:route.key,style:[StyleSheet.absoluteFill,{opacity:isFocused?1:0}],isVisible:isFocused},React.createElement(SceneView,{navigation:descriptor.navigation,screenProps:_this.props.screenProps,component:descriptor.getComponent()}));}));}};_this._setDrawerGestureRef=function(ref){_this.drawerGestureRef.current=ref;};return _this;}_createClass(DrawerView,[{key:\"componentDidMount\",value:function componentDidMount(){Dimensions.addEventListener('change',this._updateWidth);}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var _this2=this;var _this$props$navigatio=this.props.navigation.state,openId=_this$props$navigatio.openId,closeId=_this$props$navigatio.closeId,toggleId=_this$props$navigatio.toggleId,isDrawerOpen=_this$props$navigatio.isDrawerOpen;var _prevProps$navigation=prevProps.navigation.state,prevOpenId=_prevProps$navigation.openId,prevCloseId=_prevProps$navigation.closeId,prevToggleId=_prevProps$navigation.toggleId;var prevIds=[prevOpenId,prevCloseId,prevToggleId];var changedIds=[openId,closeId,toggleId].filter(function(id){return!prevIds.includes(id);}).sort(function(a,b){return a>b;});changedIds.forEach(function(id){if(id===openId){_this2._drawer.openDrawer();}else if(id===closeId){_this2._drawer.closeDrawer();}else if(id===toggleId){if(isDrawerOpen){_this2._drawer.closeDrawer();}else{_this2._drawer.openDrawer();}}});}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){Dimensions.removeEventListener('change',this._updateWidth);}},{key:\"render\",value:function render(){var _this3=this;var navigation=this.props.navigation;var activeKey=navigation.state.routes[navigation.state.index].key;var drawerLockMode=this.props.descriptors[activeKey].options.drawerLockMode;var _this$props$navigatio2=this.props.navigationConfig,overlayColor=_this$props$navigatio2.overlayColor,drawerBackgroundColor=_this$props$navigatio2.drawerBackgroundColor;if(drawerBackgroundColor){drawerBackgroundColor=typeof drawerBackgroundColor==='string'?drawerBackgroundColor:drawerBackgroundColor[this.context];}else{drawerBackgroundColor=ThemeColors[this.context].bodyContent;}if(overlayColor){overlayColor=typeof overlayColor==='string'?overlayColor:overlayColor[this.context];}else{overlayColor=ThemeColors[this.context].bodyContent;}return React.createElement(DrawerLayout,{ref:function ref(c){_this3._drawer=c;},onGestureRef:this._setDrawerGestureRef,drawerLockMode:drawerLockMode||this.props.screenProps&&this.props.screenProps.drawerLockMode||this.props.navigationConfig.drawerLockMode,drawerBackgroundColor:drawerBackgroundColor,overlayColor:overlayColor,keyboardDismissMode:this.props.navigationConfig.keyboardDismissMode,drawerWidth:this.state.drawerWidth,onDrawerOpen:this._handleDrawerOpen,onDrawerClose:this._handleDrawerClose,onDrawerStateChanged:this._handleDrawerStateChange,useNativeAnimations:this.props.navigationConfig.useNativeAnimations,renderNavigationView:this._renderNavigationView,drawerPosition:this.props.navigationConfig.drawerPosition==='right'?DrawerLayout.positions.Right:DrawerLayout.positions.Left,drawerType:this.props.navigationConfig.drawerType,edgeWidth:this.props.navigationConfig.edgeWidth,hideStatusBar:this.props.navigationConfig.hideStatusBar,statusBarAnimation:this.props.navigationConfig.statusBarAnimation,minSwipeDistance:this.props.navigationConfig.minSwipeDistance,drawerContainerStyle:this.props.navigationConfig.drawerContainerStyle,contentContainerStyle:this.props.navigationConfig.contentContainerStyle},React.createElement(DrawerGestureContext.Provider,{value:this.drawerGestureRef},this._renderContent()));}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(nextProps,prevState){var index=nextProps.navigation.state.index;return{loaded:prevState.loaded.includes(index)?prevState.loaded:[].concat(_toConsumableArray(prevState.loaded),[index])};}}]);return DrawerView;}(React.PureComponent);DrawerView.contextType=ThemeContext;DrawerView.defaultProps={lazy:true};export{DrawerView as default};var styles=StyleSheet.create({pages:{flex:1}});","map":{"version":3,"sources":["C:/Users/Prashant Krishnan/Expo/project/node_modules/react-navigation-drawer/dist/views/DrawerView.js"],"names":["React","ThemeColors","ThemeContext","SceneView","DrawerLayout","ScreenContainer","DrawerActions","DrawerSidebar","DrawerGestureContext","ResourceSavingScene","DrawerView","state","loaded","props","navigation","index","drawerWidth","navigationConfig","drawerGestureRef","createRef","_handleDrawerStateChange","newState","willShow","isDrawerIdle","dispatch","type","MARK_DRAWER_IDLE","key","MARK_DRAWER_SETTLING","MARK_DRAWER_ACTIVE","_handleDrawerOpen","DRAWER_OPENED","_handleDrawerClose","DRAWER_CLOSED","_updateWidth","setState","_renderNavigationView","drawerOpenProgress","screenProps","descriptors","contentComponent","contentOptions","drawerPosition","style","_renderContent","lazy","routes","unmountInactiveRoutes","activeKey","descriptor","getComponent","styles","pages","map","route","includes","isFocused","StyleSheet","absoluteFill","opacity","_setDrawerGestureRef","ref","current","Dimensions","addEventListener","prevProps","openId","closeId","toggleId","isDrawerOpen","prevOpenId","prevCloseId","prevToggleId","prevIds","changedIds","filter","id","sort","a","b","forEach","_drawer","openDrawer","closeDrawer","removeEventListener","drawerLockMode","options","overlayColor","drawerBackgroundColor","context","bodyContent","c","keyboardDismissMode","useNativeAnimations","positions","Right","Left","drawerType","edgeWidth","hideStatusBar","statusBarAnimation","minSwipeDistance","drawerContainerStyle","contentContainerStyle","nextProps","prevState","PureComponent","contextType","defaultProps","create","flex"],"mappings":"idAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,kIAEA,OAASC,WAAT,CAAsBC,YAAtB,CAAoCC,SAApC,KAAqD,wBAArD,CACA,MAAOC,CAAAA,YAAP,KAAyB,2CAAzB,CACA,OAASC,eAAT,KAAgC,sBAAhC,CAEA,MAAOC,CAAAA,aAAP,gCACA,MAAOC,CAAAA,aAAP,uBACA,MAAOC,CAAAA,oBAAP,qCACA,MAAOC,CAAAA,mBAAP,oC,GAKqBC,CAAAA,U,sZAgBnBC,K,CAAQ,CACNC,MAAM,CAAE,CAAC,MAAKC,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BI,KAA7B,CADF,CAENC,WAAW,CAAE,MAAO,OAAKH,KAAL,CAAWI,gBAAX,CAA4BD,WAAnC,GAAmD,UAAnD,CAAgE,MAAKH,KAAL,CAAWI,gBAAX,CAA4BD,WAA5B,EAAhE,CAA4G,MAAKH,KAAL,CAAWI,gBAAX,CAA4BD,WAF/I,C,OA4CRE,gB,CAAmBlB,KAAK,CAACmB,SAAN,E,OAEnBC,wB,CAA2B,SAACC,QAAD,CAAWC,QAAX,CAAwB,CACjD,GAAID,QAAQ,GAAK,MAAjB,CAAyB,CACvB,GAAI,CAAC,MAAKR,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BY,YAAjC,CAA+C,CAC7C,MAAKV,KAAL,CAAWC,UAAX,CAAsBU,QAAtB,CAA+B,CAC7BC,IAAI,CAAEnB,aAAa,CAACoB,gBADS,CAE7BC,GAAG,CAAE,MAAKd,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BgB,GAFJ,CAA/B,EAID,CACF,CAPD,IAOO,IAAIN,QAAQ,GAAK,UAAjB,CAA6B,CAClC,MAAKR,KAAL,CAAWC,UAAX,CAAsBU,QAAtB,CAA+B,CAC7BC,IAAI,CAAEnB,aAAa,CAACsB,oBADS,CAE7BD,GAAG,CAAE,MAAKd,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BgB,GAFJ,CAG7BL,QAAQ,CAARA,QAH6B,CAA/B,EAKD,CANM,IAMA,CACL,GAAI,MAAKT,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BY,YAAhC,CAA8C,CAC5C,MAAKV,KAAL,CAAWC,UAAX,CAAsBU,QAAtB,CAA+B,CAC7BC,IAAI,CAAEnB,aAAa,CAACuB,kBADS,CAE7BF,GAAG,CAAE,MAAKd,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BgB,GAFJ,CAA/B,EAID,CACF,CACF,C,OAEDG,iB,CAAoB,UAAM,CACxB,MAAKjB,KAAL,CAAWC,UAAX,CAAsBU,QAAtB,CAA+B,CAC7BC,IAAI,CAAEnB,aAAa,CAACyB,aADS,CAE7BJ,GAAG,CAAE,MAAKd,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BgB,GAFJ,CAA/B,EAID,C,OAEDK,kB,CAAqB,UAAM,CACzB,MAAKnB,KAAL,CAAWC,UAAX,CAAsBU,QAAtB,CAA+B,CAC7BC,IAAI,CAAEnB,aAAa,CAAC2B,aADS,CAE7BN,GAAG,CAAE,MAAKd,KAAL,CAAWC,UAAX,CAAsBH,KAAtB,CAA4BgB,GAFJ,CAA/B,EAID,C,OAEDO,Y,CAAe,UAAM,CACnB,GAAMlB,CAAAA,WAAW,CAAG,MAAO,OAAKH,KAAL,CAAWI,gBAAX,CAA4BD,WAAnC,GAAmD,UAAnD,CAAgE,MAAKH,KAAL,CAAWI,gBAAX,CAA4BD,WAA5B,EAAhE,CAA4G,MAAKH,KAAL,CAAWI,gBAAX,CAA4BD,WAA5J,CAEA,GAAI,MAAKL,KAAL,CAAWK,WAAX,GAA2BA,WAA/B,CAA4C,CAC1C,MAAKmB,QAAL,CAAc,CAAEnB,WAAW,CAAXA,WAAF,CAAd,EACD,CACF,C,OAEDoB,qB,CAAwB,SAAAC,kBAAkB,CAAI,CAC5C,MAAO,qBAAC,oBAAD,CAAsB,QAAtB,EAA+B,KAAK,CAAE,MAAKnB,gBAA3C,EACH,oBAAC,aAAD,WAAe,WAAW,CAAE,MAAKL,KAAL,CAAWyB,WAAvC,CAAoD,kBAAkB,CAAED,kBAAxE,CAA4F,UAAU,CAAE,MAAKxB,KAAL,CAAWC,UAAnH,CAA+H,WAAW,CAAE,MAAKD,KAAL,CAAW0B,WAAvJ,CAAoK,gBAAgB,CAAE,MAAK1B,KAAL,CAAWI,gBAAX,CAA4BuB,gBAAlN,CAAoO,cAAc,CAAE,MAAK3B,KAAL,CAAWI,gBAAX,CAA4BwB,cAAhR,CAAgS,cAAc,CAAE,MAAK5B,KAAL,CAAWI,gBAAX,CAA4ByB,cAA5U,CAA4V,KAAK,CAAE,MAAK7B,KAAL,CAAWI,gBAAX,CAA4B0B,KAA/X,EAA0Y,MAAK9B,KAAL,CAAWI,gBAArZ,EADG,CAAP,CAGD,C,OAED2B,c,CAAiB,UAAM,iBACM,MAAK/B,KADX,CACfgC,IADe,aACfA,IADe,CACT/B,UADS,aACTA,UADS,IAEfF,CAAAA,MAFe,CAEJ,MAAKD,KAFD,CAEfC,MAFe,IAGfkC,CAAAA,MAHe,CAGJhC,UAAU,CAACH,KAHP,CAGfmC,MAHe,CAKrB,GAAI,MAAKjC,KAAL,CAAWI,gBAAX,CAA4B8B,qBAAhC,CAAuD,CACrD,GAAIC,CAAAA,SAAS,CAAGlC,UAAU,CAACH,KAAX,CAAiBmC,MAAjB,CAAwBhC,UAAU,CAACH,KAAX,CAAiBI,KAAzC,EAAgDY,GAAhE,CACA,GAAIsB,CAAAA,UAAU,CAAG,MAAKpC,KAAL,CAAW0B,WAAX,CAAuBS,SAAvB,CAAjB,CAEA,MAAO,qBAAC,SAAD,EAAW,UAAU,CAAEC,UAAU,CAACnC,UAAlC,CAA8C,WAAW,CAAE,MAAKD,KAAL,CAAWyB,WAAtE,CAAmF,SAAS,CAAEW,UAAU,CAACC,YAAX,EAA9F,EAAP,CACD,CALD,IAKO,CACL,MAAO,qBAAC,eAAD,EAAiB,KAAK,CAAEC,MAAM,CAACC,KAA/B,EACFN,MAAM,CAACO,GAAP,CAAW,SAACC,KAAD,CAAQvC,KAAR,CAAkB,CAC9B,GAAI8B,IAAI,EAAI,CAACjC,MAAM,CAAC2C,QAAP,CAAgBxC,KAAhB,CAAb,CAAqC,CAEnC,MAAO,KAAP,CACD,CAED,GAAIyC,CAAAA,SAAS,CAAG1C,UAAU,CAACH,KAAX,CAAiBI,KAAjB,GAA2BA,KAA3C,CACA,GAAIkC,CAAAA,UAAU,CAAG,MAAKpC,KAAL,CAAW0B,WAAX,CAAuBe,KAAK,CAAC3B,GAA7B,CAAjB,CAEA,MAAO,qBAAC,mBAAD,EAAqB,GAAG,CAAE2B,KAAK,CAAC3B,GAAhC,CAAqC,KAAK,CAAE,CAAC8B,UAAU,CAACC,YAAZ,CAA0B,CAAEC,OAAO,CAAEH,SAAS,CAAG,CAAH,CAAO,CAA3B,CAA1B,CAA5C,CAAuG,SAAS,CAAEA,SAAlH,EACD,oBAAC,SAAD,EAAW,UAAU,CAAEP,UAAU,CAACnC,UAAlC,CAA8C,WAAW,CAAE,MAAKD,KAAL,CAAWyB,WAAtE,CAAmF,SAAS,CAAEW,UAAU,CAACC,YAAX,EAA9F,EADC,CAAP,CAGD,CAZE,CADE,CAAP,CAeD,CACF,C,OAEDU,oB,CAAuB,SAAAC,GAAG,CAAI,CAC5B,MAAK3C,gBAAL,CAAsB4C,OAAtB,CAAgCD,GAAhC,CACD,C,mGA5HmB,CAClBE,UAAU,CAACC,gBAAX,CAA4B,QAA5B,CAAsC,KAAK9B,YAA3C,EACD,C,8DAEkB+B,S,CAAW,2CAMxB,KAAKpD,KAAL,CAAWC,UAAX,CAAsBH,KANE,CAE1BuD,MAF0B,uBAE1BA,MAF0B,CAG1BC,OAH0B,uBAG1BA,OAH0B,CAI1BC,QAJ0B,uBAI1BA,QAJ0B,CAK1BC,YAL0B,uBAK1BA,YAL0B,2BAWxBJ,SAAS,CAACnD,UAAV,CAAqBH,KAXG,CAQlB2D,UARkB,uBAQ1BJ,MAR0B,CASjBK,WATiB,uBAS1BJ,OAT0B,CAUhBK,YAVgB,uBAU1BJ,QAV0B,CAa5B,GAAIK,CAAAA,OAAO,CAAG,CAACH,UAAD,CAAaC,WAAb,CAA0BC,YAA1B,CAAd,CACA,GAAIE,CAAAA,UAAU,CAAG,CAACR,MAAD,CAASC,OAAT,CAAkBC,QAAlB,EAA4BO,MAA5B,CAAmC,SAAAC,EAAE,QAAI,CAACH,OAAO,CAAClB,QAAR,CAAiBqB,EAAjB,CAAL,EAArC,EAAgEC,IAAhE,CAAqE,SAACC,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAAGC,CAAd,EAArE,CAAjB,CAEAL,UAAU,CAACM,OAAX,CAAmB,SAAAJ,EAAE,CAAI,CACvB,GAAIA,EAAE,GAAKV,MAAX,CAAmB,CACjB,MAAI,CAACe,OAAL,CAAaC,UAAb,GACD,CAFD,IAEO,IAAIN,EAAE,GAAKT,OAAX,CAAoB,CACzB,MAAI,CAACc,OAAL,CAAaE,WAAb,GACD,CAFM,IAEA,IAAIP,EAAE,GAAKR,QAAX,CAAqB,CAC1B,GAAIC,YAAJ,CAAkB,CAChB,MAAI,CAACY,OAAL,CAAaE,WAAb,GACD,CAFD,IAEO,CACL,MAAI,CAACF,OAAL,CAAaC,UAAb,GACD,CACF,CACF,CAZD,EAaD,C,mEAEsB,CACrBnB,UAAU,CAACqB,mBAAX,CAA+B,QAA/B,CAAyC,KAAKlD,YAA9C,EACD,C,uCAyFQ,oBACCpB,CAAAA,UADD,CACgB,KAAKD,KADrB,CACCC,UADD,CAEP,GAAMkC,CAAAA,SAAS,CAAGlC,UAAU,CAACH,KAAX,CAAiBmC,MAAjB,CAAwBhC,UAAU,CAACH,KAAX,CAAiBI,KAAzC,EAAgDY,GAAlE,CAFO,GAGC0D,CAAAA,cAHD,CAGoB,KAAKxE,KAAL,CAAW0B,WAAX,CAAuBS,SAAvB,EAAkCsC,OAHtD,CAGCD,cAHD,4BAIuC,KAAKxE,KAAL,CAAWI,gBAJlD,CAIDsE,YAJC,wBAIDA,YAJC,CAIaC,qBAJb,wBAIaA,qBAJb,CAMP,GAAIA,qBAAJ,CAA2B,CACzBA,qBAAqB,CAAG,MAAOA,CAAAA,qBAAP,GAAiC,QAAjC,CAA4CA,qBAA5C,CAAoEA,qBAAqB,CAAC,KAAKC,OAAN,CAAjH,CACD,CAFD,IAEO,CACLD,qBAAqB,CAAGvF,WAAW,CAAC,KAAKwF,OAAN,CAAX,CAA0BC,WAAlD,CACD,CAED,GAAIH,YAAJ,CAAkB,CAChBA,YAAY,CAAG,MAAOA,CAAAA,YAAP,GAAwB,QAAxB,CAAmCA,YAAnC,CAAkDA,YAAY,CAAC,KAAKE,OAAN,CAA7E,CACD,CAFD,IAEO,CACLF,YAAY,CAAGtF,WAAW,CAAC,KAAKwF,OAAN,CAAX,CAA0BC,WAAzC,CACD,CAED,MAAO,qBAAC,YAAD,EAAc,GAAG,CAAE,aAAAC,CAAC,CAAI,CAC7B,MAAI,CAACV,OAAL,CAAeU,CAAf,CACD,CAFM,CAEJ,YAAY,CAAE,KAAK/B,oBAFf,CAEqC,cAAc,CAAEyB,cAAc,EAAI,KAAKxE,KAAL,CAAWyB,WAAX,EAA0B,KAAKzB,KAAL,CAAWyB,WAAX,CAAuB+C,cAAnE,EAAqF,KAAKxE,KAAL,CAAWI,gBAAX,CAA4BoE,cAFtK,CAEsL,qBAAqB,CAAEG,qBAF7M,CAEoO,YAAY,CAAED,YAFlP,CAEgQ,mBAAmB,CAAE,KAAK1E,KAAL,CAAWI,gBAAX,CAA4B2E,mBAFjT,CAEsU,WAAW,CAAE,KAAKjF,KAAL,CAAWK,WAF9V,CAE2W,YAAY,CAAE,KAAKc,iBAF9X,CAEiZ,aAAa,CAAE,KAAKE,kBAFra,CAEyb,oBAAoB,CAAE,KAAKZ,wBAFpd,CAE8e,mBAAmB,CAAE,KAAKP,KAAL,CAAWI,gBAAX,CAA4B4E,mBAF/hB,CAEojB,oBAAoB,CAAE,KAAKzD,qBAF/kB,CAEsmB,cAAc,CAAE,KAAKvB,KAAL,CAAWI,gBAAX,CAA4ByB,cAA5B,GAA+C,OAA/C,CAAyDtC,YAAY,CAAC0F,SAAb,CAAuBC,KAAhF,CAAwF3F,YAAY,CAAC0F,SAAb,CAAuBE,IAFruB,CAIP,UAAU,CAAE,KAAKnF,KAAL,CAAWI,gBAAX,CAA4BgF,UAJjC,CAI6C,SAAS,CAAE,KAAKpF,KAAL,CAAWI,gBAAX,CAA4BiF,SAJpF,CAI+F,aAAa,CAAE,KAAKrF,KAAL,CAAWI,gBAAX,CAA4BkF,aAJ1I,CAIyJ,kBAAkB,CAAE,KAAKtF,KAAL,CAAWI,gBAAX,CAA4BmF,kBAJzM,CAI6N,gBAAgB,CAAE,KAAKvF,KAAL,CAAWI,gBAAX,CAA4BoF,gBAJ3Q,CAI6R,oBAAoB,CAAE,KAAKxF,KAAL,CAAWI,gBAAX,CAA4BqF,oBAJ/U,CAIqW,qBAAqB,CAAE,KAAKzF,KAAL,CAAWI,gBAAX,CAA4BsF,qBAJxZ,EAKH,oBAAC,oBAAD,CAAsB,QAAtB,EAA+B,KAAK,CAAE,KAAKrF,gBAA3C,EACG,KAAK0B,cAAL,EADH,CALG,CAAP,CASD,C,4EAvK+B4D,S,CAAWC,S,CAAW,IAC5C1F,CAAAA,KAD4C,CAClCyF,SAAS,CAAC1F,UAAV,CAAqBH,KADa,CAC5CI,KAD4C,CAGpD,MAAO,CAELH,MAAM,CAAE6F,SAAS,CAAC7F,MAAV,CAAiB2C,QAAjB,CAA0BxC,KAA1B,EAAmC0F,SAAS,CAAC7F,MAA7C,8BAA0D6F,SAAS,CAAC7F,MAApE,GAA4EG,KAA5E,EAFH,CAAP,CAID,C,wBAdqCf,KAAK,CAAC0G,a,EAAzBhG,U,CACZiG,W,CAAczG,Y,CADFQ,U,CAGZkG,Y,CAAe,CACpB/D,IAAI,CAAE,IADc,C,QAHHnC,U,aAiLrB,GAAMyC,CAAAA,MAAM,CAAGM,UAAU,CAACoD,MAAX,CAAkB,CAC/BzD,KAAK,CAAE,CACL0D,IAAI,CAAE,CADD,CADwB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { ThemeColors, ThemeContext, SceneView } from '@react-navigation/core';\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent {\n  static contextType = ThemeContext;\n\n  static defaultProps = {\n    lazy: true\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth: typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      openId,\n      closeId,\n      toggleId,\n      isDrawerOpen\n    } = this.props.navigation.state;\n    const {\n      openId: prevOpenId,\n      closeId: prevCloseId,\n      toggleId: prevToggleId\n    } = prevProps.navigation.state;\n\n    let prevIds = [prevOpenId, prevCloseId, prevToggleId];\n    let changedIds = [openId, closeId, toggleId].filter(id => !prevIds.includes(id)).sort((a, b) => a > b);\n\n    changedIds.forEach(id => {\n      if (id === openId) {\n        this._drawer.openDrawer();\n      } else if (id === closeId) {\n        this._drawer.closeDrawer();\n      } else if (id === toggleId) {\n        if (isDrawerOpen) {\n          this._drawer.closeDrawer();\n        } else {\n          this._drawer.openDrawer();\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  drawerGestureRef = React.createRef();\n\n  _handleDrawerStateChange = (newState, willShow) => {\n    if (newState === 'Idle') {\n      if (!this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_IDLE,\n          key: this.props.navigation.state.key\n        });\n      }\n    } else if (newState === 'Settling') {\n      this.props.navigation.dispatch({\n        type: DrawerActions.MARK_DRAWER_SETTLING,\n        key: this.props.navigation.state.key,\n        willShow\n      });\n    } else {\n      if (this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_ACTIVE,\n          key: this.props.navigation.state.key\n        });\n      }\n    }\n  };\n\n  _handleDrawerOpen = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_OPENED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _handleDrawerClose = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_CLOSED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _updateWidth = () => {\n    const drawerWidth = typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  _renderNavigationView = drawerOpenProgress => {\n    return <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <DrawerSidebar screenProps={this.props.screenProps} drawerOpenProgress={drawerOpenProgress} navigation={this.props.navigation} descriptors={this.props.descriptors} contentComponent={this.props.navigationConfig.contentComponent} contentOptions={this.props.navigationConfig.contentOptions} drawerPosition={this.props.navigationConfig.drawerPosition} style={this.props.navigationConfig.style} {...this.props.navigationConfig} />\n      </DrawerGestureContext.Provider>;\n  };\n\n  _renderContent = () => {\n    let { lazy, navigation } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />;\n    } else {\n      return <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          let isFocused = navigation.state.index === index;\n          let descriptor = this.props.descriptors[route.key];\n\n          return <ResourceSavingScene key={route.key} style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]} isVisible={isFocused}>\n                <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />\n              </ResourceSavingScene>;\n        })}\n        </ScreenContainer>;\n    }\n  };\n\n  _setDrawerGestureRef = ref => {\n    this.drawerGestureRef.current = ref;\n  };\n\n  render() {\n    const { navigation } = this.props;\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = this.props.descriptors[activeKey].options;\n    let { overlayColor, drawerBackgroundColor } = this.props.navigationConfig;\n\n    if (drawerBackgroundColor) {\n      drawerBackgroundColor = typeof drawerBackgroundColor === 'string' ? drawerBackgroundColor : drawerBackgroundColor[this.context];\n    } else {\n      drawerBackgroundColor = ThemeColors[this.context].bodyContent;\n    }\n\n    if (overlayColor) {\n      overlayColor = typeof overlayColor === 'string' ? overlayColor : overlayColor[this.context];\n    } else {\n      overlayColor = ThemeColors[this.context].bodyContent;\n    }\n\n    return <DrawerLayout ref={c => {\n      this._drawer = c;\n    }} onGestureRef={this._setDrawerGestureRef} drawerLockMode={drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode} drawerBackgroundColor={drawerBackgroundColor} overlayColor={overlayColor} keyboardDismissMode={this.props.navigationConfig.keyboardDismissMode} drawerWidth={this.state.drawerWidth} onDrawerOpen={this._handleDrawerOpen} onDrawerClose={this._handleDrawerClose} onDrawerStateChanged={this._handleDrawerStateChange} useNativeAnimations={this.props.navigationConfig.useNativeAnimations} renderNavigationView={this._renderNavigationView} drawerPosition={this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left}\n    /* props specific to react-native-gesture-handler/DrawerLayout */\n    drawerType={this.props.navigationConfig.drawerType} edgeWidth={this.props.navigationConfig.edgeWidth} hideStatusBar={this.props.navigationConfig.hideStatusBar} statusBarAnimation={this.props.navigationConfig.statusBarAnimation} minSwipeDistance={this.props.navigationConfig.minSwipeDistance} drawerContainerStyle={this.props.navigationConfig.drawerContainerStyle} contentContainerStyle={this.props.navigationConfig.contentContainerStyle}>\n        <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n          {this._renderContent()}\n        </DrawerGestureContext.Provider>\n      </DrawerLayout>;\n  }\n}\n\nconst styles = StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});"]},"metadata":{},"sourceType":"module"}