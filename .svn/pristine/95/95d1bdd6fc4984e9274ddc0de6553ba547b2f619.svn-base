let MongoClient = require("mongodb")

async function connectToDatabase(url) {
    try{
        const client = await new MongoClient(url, {autoReconnect: true, useNewUrlParser: true});
        return Promise.resolve(client)
    } catch (e){
        console.error("Failed to connect to the mongodb instance")
        return Promise.reject(e)
    } 
}

async function seeder() {
    let client = await connectToDatabase('mongodb://localhost:27017');
    let dbCourse = client.db("course-service");
    let dbAttendance = client.db("attendance-service");
    let dbAbsence = client.db("absence-service");
    let dbPolling = client.db("polling-service");

    let schedule = {
        days: [2, 4, 5],
        timeStart: 19.0,
        timeEd: 20.0,
        location: {
            lat: 38.9892543,
            long: -76.9510169,
            radious: 90
        }
    }

    let section = {
        id: 'CMSC216-0101',
        roster: ['stu', 'dent'],
        schedule: schedule
    }

    await dbCourse.collection('Section').insertOne(section);

    let sec = await dbCourse.collection('Section').find().toArray();

    console.log(sec);

    let course = {
        id: 'CMSC216',
        educators: ['lherman'],
        semester: 'fall2019',
        topics: [{
            date: Date(1970,1,1,19,0,0,0),
            topicsCovered: ['pointers']
        }],
        sctions: ['CMSC216-0101'],
        schedule: schedule
    }

    await dbCourse.collection('Course').insertOne(course);

    let cou = await dbCourse.collection('Course').find().toArray();

    console.log(cou);

    let educator = {
        name: "Larry Herman",
        uid: "lherman",
        type: 2,
        classesCurrent: [{
            courseId: 'CMSC216',
            sectionId: 'CMSC216-0101'
        }]
    }

    let student1 = {
        name: "student1",
        uid: "stu",
        type: 1,
        classesCurrent: [{
            courseId: 'CMSC216',
            sectionId: 'CMSC216-0101'
        }]
    }

    let student2 = {
        name: "student2",
        uid: "dent",
        type: 1,
        classesCurrent: [{
            courseId: 'CMSC216',
            sectionId: 'CMSC216-0101'
        }]
    }

    await dbCourse.collection('User').insertOne(educator);
    await dbCourse.collection('User').insertOne(student1);
    await dbCourse.collection('User').insertOne(student2);

    let usrs = await dbCourse.collection('Course').find().toArray();

    console.log(usrs);

    let pollChoice = {
        course_id: 'CMSC216',
        status: 'open',
        creator: 'lherman',
        question: 'have you studied?',
        type: 'choice',
        choices: [ 
            {
                choice: 'yes',
                choice_id: '0',
                votes: 0,
                voters: []
            },
            {
                choice: 'no',
                choice_id: '1',
                votes: 0,
                voters: []
            }
        ]
    }

    let pollText = {
        course_id: 'CMSC216',
        status: 'open',
        creator: 'lherman',
        question: 'have you studied?',
        type: 'text',
        text_answers: [{
            uid: '',
            answer: ''
        }]
    }

    await dbPolling.collection('Polls').insertOne(pollChoice);
    await dbPolling.collection('Polls').insertOne(pollText);

    let polls = await dbPolling.collection('Polls').find().toArray();
    console.log(polls);

    let now = new Date();
    const time = now.getTime();

    let attendaceLog = {
        uid: 'stu',
        timestamp: time,
        course_id: 'CMSC216',
    }
    client.close()
}

seeder();