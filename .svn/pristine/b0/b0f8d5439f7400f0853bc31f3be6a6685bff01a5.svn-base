{"version":3,"sources":["config.js","api.js","components/CourseCard.jsx","components/CourseList.jsx","pages/DashboardPage.jsx","components/AttendanceGraphs.jsx","components/StudentAttendance.jsx","pages/AttendancePage.jsx","components/AbsenceCard.jsx","components/AbsenceList.jsx","pages/AbsencePage.jsx","components/PollCard.jsx","components/PollForm.jsx","pages/PollsPage.jsx","components/LectureDisplay.jsx","components/GeolocationButton.jsx","components/LectureForm.jsx","components/CourseForm.jsx","pages/SettingsPage.jsx","App.js","serviceWorker.js","index.js"],"names":["backendUrl","did","a","axios","get","config","res","status","data","console","log","message","body","post","getUser","getMe","createCourse","getAttendance","getMyClasses","CourseCard","props","Card","style","width","Body","Title","lectureName","CourseList","state","courses","api","result","this","setState","error","length","map","info","React","Component","Dashboardpage","Container","user","name","AttendanceGraphs","attendance","filter","today","Date","yesterday","setDate","getDate","anotherDay","bloopDay","oneMoreDay","dateDict","uid","classId","courseId","sectionID","timestamp","record","index","dateStr","toDateString","items","Object","keys","key","sort","first","second","newState","obj","attendanceRecord","date","totalAttended","push","className","height","stroke","fill","onMouseEnter","handleLegendMouseEnter","onMouseLeave","handleLegendMouseLeave","dataKey","value","position","type","unit","angle","activeDot","r","StudentAttendance","display","setDisplay","bind","renderTableData","test","uidDict","dateString","slice","Form","Label","Control","onChange","e","target","placeholder","Row","Button","onClick","marginTop","variant","size","id","Table","striped","bordered","hover","AttendancePage","AbsenceCard","section_id","rationale","email","AbsenceList","list_of_absences","fetch","method","headers","Accept","then","response","json","responseJSON","window","location","reload","list","_id","handleDeleteSpecificRequest","handleUpdate","handleAllDelete","PollCard","Header","as","pollNum","Subtitle","Text","question","Link","href","PollForm","initialState","questionType","choices","handleQuestions","handleChoiceChange","handleAddChoice","submitForm","event","idx","newChoices","currChoice","sidx","concat","handleSubmit","Group","controlId","choice","Pollspage","polls","newPoll","currDate","options","weekday","day","Intl","DateTimeFormat","format","fullDate","poll","creator","GeolocationButton","loading","GetGeolocation","geo","navigator","geolocation","Error","getCurrentPosition","Position","document","getElementById","removeAttribute","locationCallback","coords","setAttribute","Spinner","role","animiation","CourseForm","lectures","sections","roster","courseName","tas","handleLecturesUpload","handleRosterUpload","handleSectionsUpload","showAlert","parseDays","days","match","re","newSections","s","section","rest","daysArr","sectionId","newLectures","l","course","toLowerCase","replace","split","header","dynamicTyping","skipEmptyLines","onSubmit","Col","onFileLoaded","parserOptions","background","borderColor","Settings","alert","show","hideAlert","Alert","onClose","dismissible","App","me","LinkStyles","textDecoration","color","margin","Navbar","expand","to","Brand","Toggle","aria-controls","Collapse","Nav","path","Boolean","hostname","defaults","withCredentials","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.afbfecab.chunk.js","sourcesContent":["export default {\n    backendUrl: \"http://localhost:8080/api\",\n}","import axios from 'axios';\nimport config from './config.js';\n\nasync function getUser(did) {\n    let res = await axios.get(config.backendUrl + \"/user/\"+ did);\n    if (res.status < 300) {\n        return res.data;\n    }\n}\n\nasync function getMe() {\n    let res = await axios.get(config.backendUrl + \"/me\");\n    return res.data;\n}\n\nasync function getMyClasses() {\n    let res = await axios.get(config.backendUrl + \"/me/classes\");\n    console.log(res)\n    if (res.status < 300) return res.data;\n    else console.log(res.data.message)\n}\n\nasync function createCourse(body) {\n    let res = await axios.post(config.backendUrl + \"/classes\", body);\n    if (res.status < 300) return true;\n    console.log(res.data.message)\n}\n\nasync function getAttendance() {\n    let res = await axios.get(config.backendUrl + \"/attendance\");\n    if (res.status < 300) return res.data;\n    return false\n}\n\nexport default {getUser, getMe, createCourse, getAttendance, getMyClasses}","import React from 'react'\r\nimport { Button, Card } from 'react-bootstrap';\r\nimport api from '../api'\r\n\r\n\r\n const CourseCard = (props) =>  {\r\n    const deleteCourse = (event) => {\r\n      event.preventDefault();\r\n      \r\n    }\r\n\r\n    return (  \r\n      <Card style={{ width: '13rem' }}>\r\n        <Card.Body>\r\n          <Card.Title>{props.lectureName}</Card.Title>\r\n          {/* <Button onClick={deleteCourse}>Delete Course</Button> */}\r\n        </Card.Body>\r\n      </Card>\r\n  )\r\n\r\n  \r\n} \r\n\r\nexport default CourseCard","import React from 'react';\nimport CourseCard from \"./CourseCard\";\nimport axios from \"axios\";\nimport api from '../api';\n\nexport default class CourseList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {courses: []}\n    }\n\n    async componentDidMount() {\n        \n        try{\n            let result = await api.getMyClasses();\n            this.setState({courses: result});\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                {\n                   ( this.state.courses.length === 0)\n                    ? <p>You don't have any courses</p>\n                    : this.state.courses.map((info) => {\n                        return <CourseCard {...info}/>\n                    })\n                }\n            </div>\n        ) \n    }\n}\n    ","import React from 'react';\nimport api from '../api'\nimport CourseList from '../components/CourseList'\nimport {Container} from 'react-bootstrap'\nexport default class Dashboardpage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <Container >\n                <h4>{\"Welcome to Engage, \" + this.props.user.name}</h4>\n                <CourseList />\n            </Container>\n            \n        );\n    }\n}","import React, {Component} from 'react';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, ReferenceLine,\n    ReferenceDot, Tooltip, CartesianGrid, Legend, Brush, ErrorBar, AreaChart, Area,\n    Label, LabelList } from 'recharts'\nimport api from '../api';\n\nexport default class AttendanceGraphs extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {attendance: [], filter: {}\n        }\n    }\n    \n    async componentDidMount() {\n        let data = await api.getAttendance();\n        console.log(data);\n\n        // TEMPORARY DATA FOR TESTING\n        let today = new Date ();\n        let yesterday = new Date();\n        yesterday.setDate(yesterday.getDate() - 2);\n        let anotherDay = new Date();\n        anotherDay.setDate(anotherDay.getDate() - 5);\n        let bloopDay = new Date();\n        bloopDay.setDate(bloopDay.getDate() - 6);\n        let oneMoreDay = new Date();\n        oneMoreDay.setDate(oneMoreDay.getDate() - 10);\n        let data2 = [\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: yesterday},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: yesterday},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: yesterday},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: yesterday},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: yesterday},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: anotherDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: anotherDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: anotherDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: anotherDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: yesterday},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: yesterday},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: yesterday},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: yesterday},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: yesterday},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: anotherDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: anotherDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: anotherDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: anotherDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: oneMoreDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: oneMoreDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: oneMoreDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: oneMoreDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: oneMoreDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: oneMoreDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: oneMoreDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: oneMoreDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: oneMoreDay},\n        ]\n\n        // Will temporarily use fake data until we have correct routing of logging attendance\n        // and using that data instead.\n        var dateDict = {}\n        data2.map((record, index) => {\n            // Day of the week dateArray[0]\n            // Month dateArray[1]\n            // Numerical day of the month dateArray[2]\n            // Year dateArray[3]\n            var dateStr = record.timestamp.toDateString() \n\n            if (dateStr in  dateDict) {\n                dateDict[dateStr] += 1;\n            } else {\n                dateDict[dateStr] = 1;\n            }\n\n        });\n        \n        // Sorting for date dictionary so that dates will always be in ascending order\n        // when visualizing in graph.\n\n        var items = Object.keys(dateDict).map(function(key) {\n            return [key, dateDict[key]]\n        })\n        items.sort(function(first, second) {\n            var date1 = new Date(first)\n            var date2 = new Date(second)\n            return date1 > date2 \n        })\n        var newState = []\n        items.map(function(obj) {\n            const attendanceRecord = {date: obj[0], totalAttended: obj[1]}\n            newState.push(attendanceRecord);\n        })\n        this.setState({attendance: newState});\n\n    }\n\n    render(){\n        return (\n            <div className='line-charts-wrapper' width=\"150px\">\n                <LineChart width={1100} height={600} data={this.state.attendance}>\n                    <CartesianGrid stroke=\"#f5f5f5\" fill=\"#e6e6e6\" />\n                    <Legend\n                        onMouseEnter={this.handleLegendMouseEnter}\n                        onMouseLeave={this.handleLegendMouseLeave}\n                    />\n                    <XAxis dataKey=\"date\" height={40}>\n                    <Label value=\"Current Week\" position=\"insideBottom\" />\n                    </XAxis>\n                    <YAxis type=\"number\" dataKey=\"totalAttended\" unit=\"\">\n                    <Label value=\"Amount of Students\" position=\"\" angle={-90} />\n                    </YAxis>\n                    <Tooltip />\n                    <Line type=\"monotone\" dataKey=\"totalAttended\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                    \n                </LineChart>\n            </div>\n        )\n    }\n} ","import React, {Component} from 'react';\nimport {Form, Button, Col, Container, Table} from 'react-bootstrap'\nimport api from '../api';\n\nexport default class StudentAttendance extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {attendance: \"\", did: \"\", display: \"none\"}\n        this.setDisplay = this.setDisplay.bind(this);\n        this.renderTableData = this.renderTableData.bind(this);\n        this.test = this.test.bind(this);\n    }\n\n    async renderTableData(){\n        this.setState({display:\"block\"});\n        let data = await api.getAttendance();\n        console.log(this.state.did)\n\n        // TEMPORARY DATA FOR TESTING\n        // Fake data was modeled after real attendance schema so should not be that difficult\n        // to switch over to live data. \n        let today = new Date ();\n        let yesterday = new Date();\n        yesterday.setDate(yesterday.getDate() - 2);\n        let anotherDay = new Date();\n        anotherDay.setDate(anotherDay.getDate() - 5);\n        let bloopDay = new Date();\n        bloopDay.setDate(bloopDay.getDate() - 6);\n        let data2 = [\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: today},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: yesterday},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: anotherDay},\n            {uid: \"sbarksda\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n            {uid: \"jack\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n            {uid: \"whwadawd\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n            {uid: \"waifaiwfb\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n            {uid: \"febajf\", classId: \"\", courseId: \"\", sectionID: \"\", timestamp: bloopDay},\n        ]\n        var uidDict = {}\n        data2.map(function (record, index) {\n            if (record.uid in uidDict){\n                uidDict[record.uid].push(record.timestamp.toDateString())\n            } else {\n                uidDict[record.uid] = [record.timestamp.toDateString()]\n            }\n        })\n        uidDict[this.state.did].sort(function(first, second) {\n            var date1 = new Date(first)\n            var date2 = new Date(second)\n            return date1 > date2 \n        })\n        var dateString = \"\"\n        uidDict[this.state.did].map(function(date, index) {\n            dateString += date + \", \"\n        })\n        dateString = dateString.slice(0, -2)\n        this.setState({attendance: dateString})\n    }\n\n    setDisplay(){\n        this.setState({display:\"block\"});\n    }\n\n    test(){\n        console.log(\"hello\")\n    }\n\n    render() {\n        return (\n            <div>\n                <Form>\n                    <Form.Label> Filter Student </Form.Label>\n                    <Form.Control\n                        onChange={(e) => {this.setState({did: e.target.value})}} \n                        value={this.state.did}\n                        type=\"text\" \n                        placeholder=\"Enter student directory id\" \n                    />\n                    <Form.Row><Button onClick={this.renderTableData} style={{marginTop: \"10px\"}} variant=\"success\" size=\"md\">Search</Button></Form.Row>\n                </Form>\n                <h1 id='title' style={{display:this.state.display}}>Attendance</h1>\n                <div id=\"student_attendance\" style={{display:this.state.display}}>\n                {/* <h1 id='title' >Attendance</h1>\n                <div id=\"student_attendance\" > */}\n                    <Table striped bordered hover id='student'>\n                        <tr>\n                            <th>Directory ID</th>\n                            <th>Dates Attended</th>\n                        </tr>\n                            <tbody>\n                                <tr key={this.state.did}>\n                                    <td>{this.state.did}</td>\n                                    <td>{this.state.attendance}</td>\n                                </tr>\n                            </tbody>\n                    </Table>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport api from '../api'\nimport AttendanceGraphs from '../components/AttendanceGraphs';\nimport StudentAttendance from '../components/StudentAttendance';\nimport { Container } from 'react-bootstrap';\n\nexport default class AttendancePage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {attendance: [], filter: {}}\n    }\n\n    async componentDidMount() {\n        \n    }\n\n    render() {\n        return (\n            <div>\n                <h3 className=\"text-center mt-4\">Class Attendance</h3>\n                <Container>\n                    <AttendanceGraphs />\n                </Container>\n                <Container>\n                    <StudentAttendance />\n                </Container>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Button, Card} from 'react-bootstrap';\nimport {\n    BrowserRouter as Router,\n    Link,\n    useLocation,\n    Switch, \n    Route\n  } from \"react-router-dom\";\n  //import email from 'react-native-email';\n\n  const APPROVAL_SUBJECT_TEXT = \"Your request has been approved\"; \n  const DENIAL_SUBJECT_TEXT = \"Your request has been denied\"; \n\n  const APPROVAL_BODY_TEXT = \"Your request has been approved\"; \n  const DENIAL_BODY_TEXT = \"Your request has been approved\"; \n\n\n\n  export default class AbsenceCard extends React.Component {\n    \n    // sendEmail(subject, body){\n\n    //   const to = [this.props.email] // string or array of email addresses\n    //     email(to, {\n    //         // Optional additional arguments\n    //         subject: subject,\n    //         body: body\n    //     }).catch(console.error)\n\n    // }\n\n    // handleApprove(){\n\n    //   this.sendEmail(APPROVAL_SUBJECT_TEXT, APPROVAL_BODY_TEXT); \n    // }\n\n    // handleReject(){\n    //   this.sendEmail(DENIAL_SUBJECT_TEXT, DENIAL_BODY_TEXT); \n    // }\n    \n    // handleCustom(){\n    //   this.sendEmail(\"\",\"\"); \n    // }\n   \n    \n    render() {\n       \n         return (\n                <div>    \n                <Card >\n                <Card.Body>\n                <Card.Title>{this.props.section_id}</Card.Title>\n                    <h3>{this.props.uid}</h3>\n                    <h4>{this.props.type}</h4>\n                    <h4>{this.props.rationale}</h4>\n                    <h4>{this.props.email}</h4>\n                <Button> Approve</Button>\n                <Button >Deny</Button>\n                <Button >Custom</Button>\n                </Card.Body>\n                </Card>\n\n                </div>\n             )\n    }\n   \n//   <div>\n//   <h1>Testing</h1>\n// </div>\n// <div className=\"cart\">\n//  <button className=\"btn btn-block\" onClick={this.toggle.bind(this)}>\n//                       Open/close\n//  </button>\n//  </div>\n  \n} \n\n","import React, {Label} from 'react';\nimport { Button, Card } from 'react-bootstrap';\nimport {\n    BrowserRouter as Router,\n    Link,\n    useLocation,\n    Switch, \n    Route\n  } from \"react-router-dom\";\n  import AbsenceCard from \"./AbsenceCard\";\n\n\n\n  export default class AbsenceList extends React.Component {\n\n    constructor(props){\n        super(props); \n        this.state = { list_of_absences:[] }\n    }\n    \n    componentWillMount(){\n        fetch(\"http://localhost:8080/api/absences\", {\n            method: 'GET',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json',\n              \n          }\n          })\n          .then((response) => response.json()).then((responseJSON) => {\n             console.log(responseJSON);\n            this.setState({list_of_absences: responseJSON}); \n          })\n    } \n\n    handleUpdate(){\n        window.location.reload(); \n\n    }\n\n    handleAllDelete(){\n     fetch(\"http://localhost:8080/api/absences/deleteAll\", {\n            method: 'DELETE',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json',    \n          }\n          })\n          window.location.reload(); \n\n\n    }\n\n    handleDeleteSpecificRequest(id){\n        fetch(`http://localhost:8080/api/absences/${id}`, {\n            method: 'DELETE',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json',    \n          }\n          })\n\n          window.location.reload(); \n    }\n    \n    \n    render() {\n        \n        let list = (this.state.list_of_absences).map((data) => {\n            return (\n            <div>\n                <Card>\n                    <AbsenceCard\n                    id={data._id}\n                    section_id = {data.section_id}    \n                    type={data.type} \n                    rationale={data.rationale}\n                    uid={data.uid}\n                    email={data.email}\n                    />\n                    <button onClick={() => this.handleDeleteSpecificRequest(data._id)}>Delete</button>\n                    <br/>\n                </Card>\n            </div>\n               \n                )\n        })\n\n         return (\n               <div>\n                   <Button onClick={this.handleUpdate}>Refresh</Button>\n                   <Button onClick={this.handleAllDelete}> Delete All Requests </Button>\n                   <br/>\n                   <br/>\n                   <br/>\n                   {list}\n               </div>\n             )\n    }\n} \n\n","import React, {Label} from 'react';\nimport AbsenceList from \"../components/AbsenceList\"\n\nexport default class Dashboardpage extends React.Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return (\n        <div>\n            <h1>Welcome to AbsencePage</h1>\n            \n            <AbsenceList /> \n        </div>\n        );\n    }\n}","import React, {Component} from 'react';\r\nimport { Button, Card } from 'react-bootstrap';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n    useLocation,\r\n    Switch, \r\n    Route\r\n  } from \"react-router-dom\";\r\n\r\n\r\n\r\nexport default class PollCard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n            <Card style={{ width: '18rem' }}>\r\n                <Card.Header as=\"h5\"> Poll #{this.props.pollNum + 1} </Card.Header>\r\n                <Card.Body>\r\n                    <Card.Title> Opened on {this.props.date}</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">{this.props.type}</Card.Subtitle>\r\n                    <Card.Text> {this.props.question} </Card.Text>\r\n                    <Card.Link href=\"#\">Close</Card.Link>\r\n                    <Card.Link href=\"#\">Delete</Card.Link>\r\n                    <Card.Link href=\"#\">View Answers</Card.Link>\r\n                </Card.Body>\r\n            </Card>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport config from '../config';\r\n\r\n\r\nexport default class PollForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialState = {\r\n            question: '',\r\n            questionType: '',\r\n            choices: [],\r\n        }\r\n\r\n        this.state = this.initialState;\r\n        this.handleQuestions = this.handleQuestions.bind(this);\r\n        this.handleChoiceChange = this.handleChoiceChange.bind(this);\r\n        this.handleAddChoice = this.handleAddChoice.bind(this);\r\n        this.submitForm = this.submitForm.bind(this);\r\n    }\r\n\r\n    handleQuestions(event) {\r\n     \r\n        const { name, value } = event.target;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    }\r\n\r\n    handleChoiceChange(idx, event) {\r\n\r\n        const newChoices = this.state.choices.map((currChoice, sidx) => {\r\n            if(idx !== sidx) return currChoice;\r\n            return event.target.value;\r\n        });\r\n\r\n        this.setState({\r\n            choices: newChoices\r\n        });\r\n    }\r\n\r\n    handleAddChoice() {\r\n\r\n        this.setState({\r\n            choices: this.state.choices.concat(['']),\r\n        })\r\n    }\r\n\r\n    submitForm() {\r\n\r\n        this.props.handleSubmit(this.state);\r\n        this.setState(this.initialState);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Form>\r\n            <Form.Group controlId=\"question\">\r\n                <Form.Label>Question</Form.Label>\r\n                <Form.Control \r\n                as=\"textarea\" \r\n                placeholder=\"Enter question for poll\"\r\n                name=\"question\"\r\n                value={this.state.question}\r\n                onChange={this.handleQuestions} \r\n                />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"questionType\">\r\n                <Form.Label>Question Type</Form.Label>\r\n                <Form.Control \r\n                as=\"select\" \r\n                name=\"questionType\"\r\n                value={this.state.questionType}\r\n                onChange={this.handleQuestions}>\r\n                    <option value=\"free\">Free Response</option>\r\n                    <option value=\"multiple\">Multiple Choice</option>\r\n                </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"choices\">\r\n                <Form.Label>Answer Choices</Form.Label>\r\n                <Form.Text className=\"text-muted\">\r\n                    Provide only if question type is Multiple Choice.\r\n                </Form.Text>\r\n\r\n                {this.state.choices.map((choice,idx) => {\r\n                    return <Form.Row>\r\n                            <Form.Control \r\n                            type=\"text\" \r\n                            placeholder={`Answer #${idx + 1}`}\r\n                            name=\"choices\"\r\n                            value={choice}\r\n                            onChange={(e) => this.handleChoiceChange(idx, e)}/>\r\n                    </Form.Row>\r\n                })}\r\n\r\n                <Button variant=\"primary\" onClick={this.handleAddChoice}>\r\n                    Add Choice\r\n                </Button>\r\n            </Form.Group>\r\n\r\n            <Button style={{marginTop: \"10px\"}} variant=\"success\" size=\"md\" onClick={this.submitForm}>\r\n                Submit New Poll\r\n            </Button>\r\n            </Form>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\nimport PollCard from '../components/PollCard'\nimport PollForm from '../components/PollForm'\nimport { Container } from 'react-bootstrap';\nimport config from '.././config'\nimport axios from 'axios'\n\nexport default class Pollspage extends React.Component {\n\n    constructor(props) {\n        super(props);\n    \n        this.initialState = {\n            polls: [],\n        }\n    \n        this.state = this.initialState;\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async handleSubmit(newPoll) {\n\n        let currDate = new Date();\n        let options = { weekday: 'long'};\n        let day = new Intl.DateTimeFormat('en-US', options).format(currDate);\n        let fullDate = new Intl.DateTimeFormat('en-US').format(currDate);\n        let dateStr = day + \", \" + fullDate;\n      \n        let poll = {\n            question: newPoll.question,\n            type: newPoll.questionType,\n            choices: newPoll.choices,\n            creator: this.props.creator,\n            date: dateStr,\n        }\n  \n        //let response = await axios.post(`${config.pollURL}/polls`, poll);\n        //console.log(response.data)\n        \n        this.setState({\n          polls: [...this.state.polls, poll]\n        })\n    }\n\n    render() {\n        \n        \n\n        let list = this.state.polls.map((poll, idx) => {\n            return (<PollCard type={poll.type} question={poll.question} date={poll.date} pollNum={idx}/>)\n        }); \n    \n        return (\n            <div>\n                <h3 className=\"text-center mt-4\">Polls</h3>\n                <Container>\n                    <h4>Create a New Poll</h4>\n                    <PollForm handleSubmit={this.handleSubmit}/>\n                </Container>\n                \n                <div id=\"openPolls\">\n                    <h4>Open Polls</h4>\n                    {list}\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Container, Col, Row, Button} from 'react-bootstrap';\n\nexport default class LectureDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleDelete = this.handleDelete.bind(this)\n    }\n\n    handleDelete() {\n        this.props.removeLecture(this.props.lectureName)\n    }\n\n    render() {\n        return (\n            <Container className=\"mb-3\">\n                <Row>\n                    <Col>\n                        {this.props.lectureName}\n                    </Col>\n                    <Col>\n                        <a style={{textDecoration: \"none\", \"cursor\": \"pointer\", \"color\": \"red\"}} onClick={this.handleDelete}>X</a>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}","import React from 'react';\nimport {Button, Spinner} from 'react-bootstrap'\nexport default class GeolocationButton extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false}\n        this.GetGeolocation = this.GetGeolocation.bind(this);\n    }\n\n    GetGeolocation() {\n        const geo = navigator.geolocation;\n\n        if (!geo) {\n           throw new Error(\"Geolocation not supported!\")\n        }\n\n        geo.getCurrentPosition((Position) => {\n            this.setState({loading: false})\n            document.getElementById(\"geolocate\").removeAttribute(\"disabled\")\n            this.props.locationCallback(Position.coords)\n        }, (error) => {\n            this.setState({loading: false})\n            console.error(error);\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Button \n                    id=\"geolocate\"\n                    size=\"sm\" \n                    onClick={() => {\n                        document.getElementById(\"geolocate\").setAttribute(\"disabled\", \"true\")\n                        this.setState({loading: true})\n                        this.GetGeolocation()\n                    }}\n                >\n                    {\n                        this.state.loading \n                        ? [<Spinner key={1} as=\"span\" role=\"status\" size=\"sm\" animiation=\"border\" />, <span key={2}>Loading...</span>]\n                        : <span>Use Current Location</span>\n                    }\n                </Button>\n                <p>Note: A GPS equipped device is necessary for accurate results. Otherwise, use coordinates given by <a href=\"https://maps.google.com\">Google Maps</a> when clicking on a building.</p>\n            </div>  \n        ); \n    }\n   \n};","import React from \"react\";\nimport {Form, Col, Container, Button} from 'react-bootstrap'\nimport CSVReader from \"react-csv-reader\";\nimport GeolocationButtion from './GeolocationButton';\nimport TimePicker from 'react-time-picker';\n\nexport default class LectureForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.default = {\n            lat: \"\",\n            lng: \"\",\n            radius: \"\",\n            sections: [],\n            days: {\"M\": false, \"T\": false, \"W\": false, \"Th\": false, \"F\": false},\n            start: \"\",\n            end: \"\",\n            lectureName: \"\"\n        }\n        this.state = Object.assign({}, this.default)\n        this.handleGeolocation = this.handleGeolocation.bind(this)\n        this.handleSectionUpload = this.handleSectionUpload.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n    }\n\n     handleGeolocation(coords) {\n        this.setState({lat: coords.latitude, lng: coords.longitude})\n    }\n    \n    handleSectionUpload(sections) {\n        let newSections = sections.map(s => {\n            let {section, days, ...rest} = s;\n            try{\n                let re = /[A-Z][a-z]?/g\n                let daysArr = days.match(re)\n                return {...rest, days: daysArr, sectionId: section}\n            } catch (e) {\n                this.props.showAlert()\n            }\n           \n        })\n        this.setState({sections: newSections})\n    }\n\n    handleSave() {\n        let days = Object.keys(this.state.days).reduce((acc, d) => {\n            return this.state.days[d] ? acc.concat(d) : acc\n        }, [])\n        let sections = this.state.sections.map(section => {\n\n            let validated = (section.lat === null || section.lng === null) \n                ? {lat: parseFloat(this.state.lat), lng: parseFloat(this.state.lng)}\n                : {}\n            return Object.assign({...section}, validated)\n        })\n\n        this.props.saveLecture(Object.assign({...this.state}, {days, sections}));\n        this.setState(this.default)\n    }\n\n    render() {\n        const options = {\n            header: true,\n            dynamicTyping: true,\n            skipEmptyLines: true\n        }\n        return (\n            <Container variant=\"light\">\n            <Form.Group>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>Lecture Name</Form.Label>\n                        <Form.Control onChange={(e) => this.setState({lectureName: e.target.value})} value={this.state.lectureName} type=\"text\" placeholder=\"CMSC216-01\" />\n                    </Form.Group>\n                    <Form.Group as={Col}>\n                        <Form.Label>Sections</Form.Label>\n                        <CSVReader\n                            onFileLoaded={this.handleSectionUpload}\n                            parserOptions={options}\n                        />\n                    </Form.Group>\n                </Form.Row>\n            <Form.Label>Meeting Days</Form.Label>\n            <Form.Group>\n                {\n                    [\"M\", \"T\", \"W\", \"Th\", \"F\"].map((day) => \n                        <Form.Check \n                            inline \n                            label={day}\n                            id={day} \n                            onChange={({target}) => {\n                                let next = {}\n                                next[target.id] = !this.state.days[target.id]\n                                this.setState({\n                                    days: Object.assign(this.state.days, next)\n                                });\n                            }}\n                            value={this.state.days[day]}\n                            type=\"checkbox\" \n                        />\n                    )\n                }       \n            </Form.Group>\n        \n            <Form.Row>\n            <Form.Label className=\"mr-2\">Lecture Start</Form.Label>\n                <Form.Group >\n                    <TimePicker\n                        onChange={(time) => {\n                            this.setState({start: time})\n                        }}\n                        value={this.state.start}\n                        disableClock={true}\n                    />\n                </Form.Group>\n                <Form.Label className=\"ml-3 mr-2\">Lecture End</Form.Label>\n                <Form.Group >\n                    <TimePicker\n                        onChange={(time) => {\n                            this.setState({end: time})\n                        }}\n                        value={this.state.end}\n                        disableClock={true}\n                    />\n                </Form.Group>\n            </Form.Row>\n            \n\n            <Form.Row>\n                <Form.Group as={Col} >\n                <Form.Label>Latitude</Form.Label>\n                <Form.Control onChange={(e) => this.setState({lat: e.target.value})} value={this.state.lat} />\n                </Form.Group>\n\n                <Form.Group as={Col} >\n                <Form.Label>Longitude</Form.Label>\n                <Form.Control onChange={(e) => this.setState({lng: e.target.value})} value={this.state.lng} />\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                <Form.Label>Radius (meters)</Form.Label>\n                <Form.Control onChange={(e) => this.setState({radius: e.target.value})} value={this.state.radius} placeholder=\"10\" />\n                </Form.Group>\n            </Form.Row>\n            <Form.Row>\n                <Form.Group as={Col} >\n                    <GeolocationButtion locationCallback={this.handleGeolocation}/>\n                </Form.Group>\n            </Form.Row>\n            <Form.Row><Button onClick={this.handleSave}>Save Lecture</Button></Form.Row>\n        </Form.Group>\n        </Container>\n        )\n    }\n}","import React from 'react';\nimport {Form, Button, Col, Container} from 'react-bootstrap'\nimport CSVReader from \"react-csv-reader\";\nimport LectureDisplay from \"./LectureDisplay\";\nimport LectureForm from './LectureForm';\nimport api from '../api';\nexport default class CourseForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {lectures: [], sections: [], roster: [], courseName: \"\", tas: \"\"}\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleLecturesUpload = this.handleLecturesUpload.bind(this);\n        this.handleRosterUpload = this.handleRosterUpload.bind(this);\n        this.handleSectionsUpload = this.handleSectionsUpload.bind(this);\n    }\n\n    async handleSubmit() {\n        try {\n            if (this.state.lectures.length == 0) return this.props.showAlert(\"warning\", \"Lectures cannot be empty\");\n            else if (this.state.sections.length == 0) return this.props.showAlert(\"warning\", \"Sections cannot be empty\");\n            else if (this.state.roster.length == 0) return this.props.showAlert(\"warning\", \"Roster cannot be empty\");\n            else if (this.state.courseName == 0) return this.props.showAlert(\"warning\", \"Course Name cannot be empty\");\n\n            const parseDays = (days) => {\n                try{\n                    return days.match(re)\n                    \n                } catch (e) {\n                    throw new Error(\"Invalid date character, must be M T W Th F \")\n                }\n            }\n            let re = /[A-Z][a-z]?/g\n            let newSections = this.state.sections.map(s => {\n                let {section, days, ...rest} = s;\n                let daysArr = parseDays(days) \n                if (daysArr) return {...rest, days: daysArr, sectionId: section}\n                return;\n            })\n            let newLectures = this.state.lectures.map(l =>{\n                let {days, ...rest} = l;\n                let daysArr = parseDays(days)\n                if (daysArr) return {...rest, days: daysArr}\n                return;\n            })\n            let course = {\n                courseName: this.state.courseName.toLowerCase(),\n                roster: this.state.roster,\n                lectures: newLectures,\n                sections: newSections,\n                tas: this.state.tas.replace(' ', '').split(',')\n            }\n            let success = await api.createCourse(course);\n            if (success) {\n                this.props.showAlert(\"success\", \"Course successfully created\")\n            } else {\n                this.props.showAlert(\"danger\", \"The Course could not be created\")\n            }\n        } catch(e) {\n            this.props.showAlert(\"danger\", e.message)\n        }\n        \n    }\n\n    // handleSaveLecture(lecture) {\n    //     this.setState({lectures: this.state.lectures.concat(lecture)});\n    // }\n    // handleRemoveLecture(lectureName) {\n    //     let removeIdx = this.state.lectures.findIndex(l => l.lectureName === lectureName);\n    //     this.setState({lectures: this.state.lectures.slice(0, removeIdx).concat(this.state.lectures.slice(removeIdx+1))})\n    // }\n\n    handleRosterUpload(data) {\n        this.setState({roster: data});\n    }\n\n    handleSectionsUpload(data) {\n        this.setState({sections: data})\n    }\n\n    handleLecturesUpload(data) {\n        this.setState({lectures: data})\n    }\n\n    render() {\n        const options = {\n            header: true,\n            dynamicTyping: true,\n            skipEmptyLines: true,\n        }\n        return  (\n            <Form onSubmit={this.handleSubmit}>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>Course Name</Form.Label>\n                        <Form.Control \n                            onChange={(e) => {this.setState({courseName: e.target.value})}} \n                            value={this.state.courseName} \n                            type=\"text\" \n                            placeholder=\"CMSC216\" \n                        />\n                    </Form.Group>\n                    \n                </Form.Row>\n                <Form.Group>\n                    <Form.Label>Comma-seperated TA Directory Ids</Form.Label>\n                    <Form.Control \n                        type=\"text\"\n                        onChange={(e)=>{this.setState({tas:e.target.value})}}\n                        value={this.state.tas}\n                    />\n                </Form.Group>\n                <Form.Row>\n                    <Form.Group as={Col} >\n                        <Form.Label>Roster</Form.Label>\n                        <CSVReader\n                            onFileLoaded={this.handleRosterUpload}\n                            parserOptions={options}\n                        />\n                    </Form.Group>\n\n                    <Form.Group as={Col} >\n                        <Form.Label>Lectures</Form.Label>\n                        <CSVReader\n                            onFileLoaded={this.handleLecturesUpload}\n                            parserOptions={options}\n                        />\n                    </Form.Group>\n                    <Form.Group as={Col} >\n                        <Form.Label>Sections</Form.Label>\n                        <CSVReader\n                            onFileLoaded={this.handleSectionsUpload}\n                            parserOptions={options}\n                        />\n                    </Form.Group>\n\n                </Form.Row>\n                \n                {/* <h5>Lectures</h5>\n                    <div className=\"mb-5\">\n                        {this.state.lectures.length > 0 && \n                            this.state.lectures.map(lecture => {\n                                return <LectureDisplay key={lecture.lectureName} removeLecture={this.handleRemoveLecture} {...lecture} />\n                            })\n                        }\n                    </div>\n                    <LectureForm saveLecture={this.handleSaveLecture}/> */}\n       \n                <Form.Row><Button onClick={this.handleSubmit} style={{marginTop: \"10px\", background: \"#990000\", borderColor: \"#990000\"}}  size=\"md\">Create Course</Button></Form.Row>\n               \n            </Form>\n        )\n    }\n}","import React from 'react';\nimport CourseForm from '../components/CourseForm'\nimport { Container, Alert } from 'react-bootstrap';\n\nexport default class Settings extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {alert: {show: false, type: \"\", message: \"\"}}\n        this.showAlert = this.showAlert.bind(this);\n        this.hideAlert = this.hideAlert.bind(this);\n    }\n\n    showAlert(type, message) {\n        this.setState({alert: {show: true, type, message}})\n    }\n    hideAlert() {\n        this.setState({alert: {show: false, type: \"\", message: \"\"}})\n    }\n    render() {\n        return (\n  \n                <div>\n                    {this.state.alert.show && \n                        <Alert \n                            variant={this.state.alert.type} \n                            onClose={this.hideAlert}\n                            dismissible\n                        >\n                            {this.state.alert.message}\n                        </Alert>\n                    }\n                    <h3 className=\"text-center mt-4\">Settings</h3>\n                    <Container>\n                        <h4>Setup a Course</h4>\n   \n                        <CourseForm showAlert={this.showAlert} />\n          \n                    </Container>\n                    \n                </div>\n            \n        );\n    }\n}","import React from 'react';\nimport {Navbar, Nav} from 'react-bootstrap'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nimport DashboardPage from './pages/DashboardPage';\nimport AttendancePage from './pages/AttendancePage';\nimport AbsencePage from './pages/AbsencePage';\nimport PollsPage from './pages/PollsPage';\nimport SettingsPage from './pages/SettingsPage';\nimport api from './api'\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {user: {}}\n  }\n\n  async componentDidMount() {\n    let me = await api.getMe();\n    this.setState({user: me});\n  }\n\n  render() {\n    const LinkStyles = {\n      textDecoration: 'none',\n      color: 'white',\n      margin: '3px',\n    }\n    return (\n\n      <Router>\n        <Navbar style={{background: \"#990000\"}} expand=\"lg\">\n          <Link to=\"/dashboard\"><Navbar.Brand style={{color: \"#FFFFFF\"}}>Engage</Navbar.Brand></Link>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Link style={LinkStyles} to=\"/dashboard\">Dashboard</Link>\n              <Link style={LinkStyles} to=\"/attendance\">Attendance</Link>\n              <Link style={LinkStyles} to=\"/absence\">Absence</Link>\n              <Link style={LinkStyles} to=\"/polls\">Polls</Link>\n              <Link style={LinkStyles} to=\"/settings\">Settings</Link>\n            </Nav>\n\n          </Navbar.Collapse>\n        </Navbar>\n\n\n        <Switch>\n          <Route path=\"/dashboard\">\n            <DashboardPage user={this.state.user}/>\n          </Route>\n          <Route path=\"/attendance\">\n            <AttendancePage user={this.state.user}/>\n          </Route>\n          <Route path=\"/absence\">\n            <AbsencePage user={this.state.user}/>\n          </Route>\n          <Route path=\"/polls\">\n            <PollsPage user={this.state.user}/>\n          </Route>\n          <Route path=\"/settings\">\n            <SettingsPage user={this.state.user}/>\n          </Route>\n          <Route path=\"/\">\n            <Redirect to=\"/dashboard\"/>\n          </Route>\n        </Switch>\n      </Router>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport axios from 'axios'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\naxios.defaults.withCredentials = true;\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}